/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lightstep.tracer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-13")
public class LogRecord implements org.apache.thrift.TBase<LogRecord, LogRecord._Fields>, java.io.Serializable, Cloneable, Comparable<LogRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogRecord");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp_micros", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RUNTIME_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_guid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("span_guid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stable_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thread_id", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("line_number", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STACK_FRAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("stack_frames", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PAYLOAD_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("payload_json", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ERROR_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_flag", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LogRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LogRecordTupleSchemeFactory());
  }

  public long timestamp_micros; // optional
  public String runtime_guid; // optional
  public String span_guid; // optional
  public String stable_name; // optional
  public String message; // optional
  public String level; // optional
  public long thread_id; // optional
  public String filename; // optional
  public long line_number; // optional
  public List<String> stack_frames; // optional
  public String payload_json; // optional
  public boolean error_flag; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP_MICROS((short)1, "timestamp_micros"),
    RUNTIME_GUID((short)2, "runtime_guid"),
    SPAN_GUID((short)3, "span_guid"),
    STABLE_NAME((short)4, "stable_name"),
    MESSAGE((short)5, "message"),
    LEVEL((short)6, "level"),
    THREAD_ID((short)7, "thread_id"),
    FILENAME((short)8, "filename"),
    LINE_NUMBER((short)9, "line_number"),
    STACK_FRAMES((short)10, "stack_frames"),
    PAYLOAD_JSON((short)11, "payload_json"),
    ERROR_FLAG((short)12, "error_flag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP_MICROS
          return TIMESTAMP_MICROS;
        case 2: // RUNTIME_GUID
          return RUNTIME_GUID;
        case 3: // SPAN_GUID
          return SPAN_GUID;
        case 4: // STABLE_NAME
          return STABLE_NAME;
        case 5: // MESSAGE
          return MESSAGE;
        case 6: // LEVEL
          return LEVEL;
        case 7: // THREAD_ID
          return THREAD_ID;
        case 8: // FILENAME
          return FILENAME;
        case 9: // LINE_NUMBER
          return LINE_NUMBER;
        case 10: // STACK_FRAMES
          return STACK_FRAMES;
        case 11: // PAYLOAD_JSON
          return PAYLOAD_JSON;
        case 12: // ERROR_FLAG
          return ERROR_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_MICROS_ISSET_ID = 0;
  private static final int __THREAD_ID_ISSET_ID = 1;
  private static final int __LINE_NUMBER_ISSET_ID = 2;
  private static final int __ERROR_FLAG_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMESTAMP_MICROS,_Fields.RUNTIME_GUID,_Fields.SPAN_GUID,_Fields.STABLE_NAME,_Fields.MESSAGE,_Fields.LEVEL,_Fields.THREAD_ID,_Fields.FILENAME,_Fields.LINE_NUMBER,_Fields.STACK_FRAMES,_Fields.PAYLOAD_JSON,_Fields.ERROR_FLAG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP_MICROS, new org.apache.thrift.meta_data.FieldMetaData("timestamp_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME_GUID, new org.apache.thrift.meta_data.FieldMetaData("runtime_guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_GUID, new org.apache.thrift.meta_data.FieldMetaData("span_guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("stable_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("thread_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("line_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STACK_FRAMES, new org.apache.thrift.meta_data.FieldMetaData("stack_frames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PAYLOAD_JSON, new org.apache.thrift.meta_data.FieldMetaData("payload_json", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_FLAG, new org.apache.thrift.meta_data.FieldMetaData("error_flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogRecord.class, metaDataMap);
  }

  public LogRecord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogRecord(LogRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp_micros = other.timestamp_micros;
    if (other.isSetRuntime_guid()) {
      this.runtime_guid = other.runtime_guid;
    }
    if (other.isSetSpan_guid()) {
      this.span_guid = other.span_guid;
    }
    if (other.isSetStable_name()) {
      this.stable_name = other.stable_name;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetLevel()) {
      this.level = other.level;
    }
    this.thread_id = other.thread_id;
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
    this.line_number = other.line_number;
    if (other.isSetStack_frames()) {
      List<String> __this__stack_frames = new ArrayList<String>(other.stack_frames);
      this.stack_frames = __this__stack_frames;
    }
    if (other.isSetPayload_json()) {
      this.payload_json = other.payload_json;
    }
    this.error_flag = other.error_flag;
  }

  public LogRecord deepCopy() {
    return new LogRecord(this);
  }

  @Override
  public void clear() {
    setTimestamp_microsIsSet(false);
    this.timestamp_micros = 0;
    this.runtime_guid = null;
    this.span_guid = null;
    this.stable_name = null;
    this.message = null;
    this.level = null;
    setThread_idIsSet(false);
    this.thread_id = 0;
    this.filename = null;
    setLine_numberIsSet(false);
    this.line_number = 0;
    this.stack_frames = null;
    this.payload_json = null;
    setError_flagIsSet(false);
    this.error_flag = false;
  }

  public long getTimestamp_micros() {
    return this.timestamp_micros;
  }

  public LogRecord setTimestamp_micros(long timestamp_micros) {
    this.timestamp_micros = timestamp_micros;
    setTimestamp_microsIsSet(true);
    return this;
  }

  public void unsetTimestamp_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_MICROS_ISSET_ID);
  }

  /** Returns true if field timestamp_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_MICROS_ISSET_ID);
  }

  public void setTimestamp_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_MICROS_ISSET_ID, value);
  }

  public String getRuntime_guid() {
    return this.runtime_guid;
  }

  public LogRecord setRuntime_guid(String runtime_guid) {
    this.runtime_guid = runtime_guid;
    return this;
  }

  public void unsetRuntime_guid() {
    this.runtime_guid = null;
  }

  /** Returns true if field runtime_guid is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_guid() {
    return this.runtime_guid != null;
  }

  public void setRuntime_guidIsSet(boolean value) {
    if (!value) {
      this.runtime_guid = null;
    }
  }

  public String getSpan_guid() {
    return this.span_guid;
  }

  public LogRecord setSpan_guid(String span_guid) {
    this.span_guid = span_guid;
    return this;
  }

  public void unsetSpan_guid() {
    this.span_guid = null;
  }

  /** Returns true if field span_guid is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_guid() {
    return this.span_guid != null;
  }

  public void setSpan_guidIsSet(boolean value) {
    if (!value) {
      this.span_guid = null;
    }
  }

  public String getStable_name() {
    return this.stable_name;
  }

  public LogRecord setStable_name(String stable_name) {
    this.stable_name = stable_name;
    return this;
  }

  public void unsetStable_name() {
    this.stable_name = null;
  }

  /** Returns true if field stable_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStable_name() {
    return this.stable_name != null;
  }

  public void setStable_nameIsSet(boolean value) {
    if (!value) {
      this.stable_name = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public LogRecord setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getLevel() {
    return this.level;
  }

  public LogRecord setLevel(String level) {
    this.level = level;
    return this;
  }

  public void unsetLevel() {
    this.level = null;
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return this.level != null;
  }

  public void setLevelIsSet(boolean value) {
    if (!value) {
      this.level = null;
    }
  }

  public long getThread_id() {
    return this.thread_id;
  }

  public LogRecord setThread_id(long thread_id) {
    this.thread_id = thread_id;
    setThread_idIsSet(true);
    return this;
  }

  public void unsetThread_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREAD_ID_ISSET_ID);
  }

  /** Returns true if field thread_id is set (has been assigned a value) and false otherwise */
  public boolean isSetThread_id() {
    return EncodingUtils.testBit(__isset_bitfield, __THREAD_ID_ISSET_ID);
  }

  public void setThread_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREAD_ID_ISSET_ID, value);
  }

  public String getFilename() {
    return this.filename;
  }

  public LogRecord setFilename(String filename) {
    this.filename = filename;
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  public long getLine_number() {
    return this.line_number;
  }

  public LogRecord setLine_number(long line_number) {
    this.line_number = line_number;
    setLine_numberIsSet(true);
    return this;
  }

  public void unsetLine_number() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINE_NUMBER_ISSET_ID);
  }

  /** Returns true if field line_number is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_number() {
    return EncodingUtils.testBit(__isset_bitfield, __LINE_NUMBER_ISSET_ID);
  }

  public void setLine_numberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINE_NUMBER_ISSET_ID, value);
  }

  public int getStack_framesSize() {
    return (this.stack_frames == null) ? 0 : this.stack_frames.size();
  }

  public java.util.Iterator<String> getStack_framesIterator() {
    return (this.stack_frames == null) ? null : this.stack_frames.iterator();
  }

  public void addToStack_frames(String elem) {
    if (this.stack_frames == null) {
      this.stack_frames = new ArrayList<String>();
    }
    this.stack_frames.add(elem);
  }

  public List<String> getStack_frames() {
    return this.stack_frames;
  }

  public LogRecord setStack_frames(List<String> stack_frames) {
    this.stack_frames = stack_frames;
    return this;
  }

  public void unsetStack_frames() {
    this.stack_frames = null;
  }

  /** Returns true if field stack_frames is set (has been assigned a value) and false otherwise */
  public boolean isSetStack_frames() {
    return this.stack_frames != null;
  }

  public void setStack_framesIsSet(boolean value) {
    if (!value) {
      this.stack_frames = null;
    }
  }

  public String getPayload_json() {
    return this.payload_json;
  }

  public LogRecord setPayload_json(String payload_json) {
    this.payload_json = payload_json;
    return this;
  }

  public void unsetPayload_json() {
    this.payload_json = null;
  }

  /** Returns true if field payload_json is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload_json() {
    return this.payload_json != null;
  }

  public void setPayload_jsonIsSet(boolean value) {
    if (!value) {
      this.payload_json = null;
    }
  }

  public boolean isError_flag() {
    return this.error_flag;
  }

  public LogRecord setError_flag(boolean error_flag) {
    this.error_flag = error_flag;
    setError_flagIsSet(true);
    return this;
  }

  public void unsetError_flag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERROR_FLAG_ISSET_ID);
  }

  /** Returns true if field error_flag is set (has been assigned a value) and false otherwise */
  public boolean isSetError_flag() {
    return EncodingUtils.testBit(__isset_bitfield, __ERROR_FLAG_ISSET_ID);
  }

  public void setError_flagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERROR_FLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP_MICROS:
      if (value == null) {
        unsetTimestamp_micros();
      } else {
        setTimestamp_micros((Long)value);
      }
      break;

    case RUNTIME_GUID:
      if (value == null) {
        unsetRuntime_guid();
      } else {
        setRuntime_guid((String)value);
      }
      break;

    case SPAN_GUID:
      if (value == null) {
        unsetSpan_guid();
      } else {
        setSpan_guid((String)value);
      }
      break;

    case STABLE_NAME:
      if (value == null) {
        unsetStable_name();
      } else {
        setStable_name((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((String)value);
      }
      break;

    case THREAD_ID:
      if (value == null) {
        unsetThread_id();
      } else {
        setThread_id((Long)value);
      }
      break;

    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((String)value);
      }
      break;

    case LINE_NUMBER:
      if (value == null) {
        unsetLine_number();
      } else {
        setLine_number((Long)value);
      }
      break;

    case STACK_FRAMES:
      if (value == null) {
        unsetStack_frames();
      } else {
        setStack_frames((List<String>)value);
      }
      break;

    case PAYLOAD_JSON:
      if (value == null) {
        unsetPayload_json();
      } else {
        setPayload_json((String)value);
      }
      break;

    case ERROR_FLAG:
      if (value == null) {
        unsetError_flag();
      } else {
        setError_flag((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP_MICROS:
      return Long.valueOf(getTimestamp_micros());

    case RUNTIME_GUID:
      return getRuntime_guid();

    case SPAN_GUID:
      return getSpan_guid();

    case STABLE_NAME:
      return getStable_name();

    case MESSAGE:
      return getMessage();

    case LEVEL:
      return getLevel();

    case THREAD_ID:
      return Long.valueOf(getThread_id());

    case FILENAME:
      return getFilename();

    case LINE_NUMBER:
      return Long.valueOf(getLine_number());

    case STACK_FRAMES:
      return getStack_frames();

    case PAYLOAD_JSON:
      return getPayload_json();

    case ERROR_FLAG:
      return Boolean.valueOf(isError_flag());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP_MICROS:
      return isSetTimestamp_micros();
    case RUNTIME_GUID:
      return isSetRuntime_guid();
    case SPAN_GUID:
      return isSetSpan_guid();
    case STABLE_NAME:
      return isSetStable_name();
    case MESSAGE:
      return isSetMessage();
    case LEVEL:
      return isSetLevel();
    case THREAD_ID:
      return isSetThread_id();
    case FILENAME:
      return isSetFilename();
    case LINE_NUMBER:
      return isSetLine_number();
    case STACK_FRAMES:
      return isSetStack_frames();
    case PAYLOAD_JSON:
      return isSetPayload_json();
    case ERROR_FLAG:
      return isSetError_flag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LogRecord)
      return this.equals((LogRecord)that);
    return false;
  }

  public boolean equals(LogRecord that) {
    if (that == null)
      return false;

    boolean this_present_timestamp_micros = true && this.isSetTimestamp_micros();
    boolean that_present_timestamp_micros = true && that.isSetTimestamp_micros();
    if (this_present_timestamp_micros || that_present_timestamp_micros) {
      if (!(this_present_timestamp_micros && that_present_timestamp_micros))
        return false;
      if (this.timestamp_micros != that.timestamp_micros)
        return false;
    }

    boolean this_present_runtime_guid = true && this.isSetRuntime_guid();
    boolean that_present_runtime_guid = true && that.isSetRuntime_guid();
    if (this_present_runtime_guid || that_present_runtime_guid) {
      if (!(this_present_runtime_guid && that_present_runtime_guid))
        return false;
      if (!this.runtime_guid.equals(that.runtime_guid))
        return false;
    }

    boolean this_present_span_guid = true && this.isSetSpan_guid();
    boolean that_present_span_guid = true && that.isSetSpan_guid();
    if (this_present_span_guid || that_present_span_guid) {
      if (!(this_present_span_guid && that_present_span_guid))
        return false;
      if (!this.span_guid.equals(that.span_guid))
        return false;
    }

    boolean this_present_stable_name = true && this.isSetStable_name();
    boolean that_present_stable_name = true && that.isSetStable_name();
    if (this_present_stable_name || that_present_stable_name) {
      if (!(this_present_stable_name && that_present_stable_name))
        return false;
      if (!this.stable_name.equals(that.stable_name))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (!this.level.equals(that.level))
        return false;
    }

    boolean this_present_thread_id = true && this.isSetThread_id();
    boolean that_present_thread_id = true && that.isSetThread_id();
    if (this_present_thread_id || that_present_thread_id) {
      if (!(this_present_thread_id && that_present_thread_id))
        return false;
      if (this.thread_id != that.thread_id)
        return false;
    }

    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }

    boolean this_present_line_number = true && this.isSetLine_number();
    boolean that_present_line_number = true && that.isSetLine_number();
    if (this_present_line_number || that_present_line_number) {
      if (!(this_present_line_number && that_present_line_number))
        return false;
      if (this.line_number != that.line_number)
        return false;
    }

    boolean this_present_stack_frames = true && this.isSetStack_frames();
    boolean that_present_stack_frames = true && that.isSetStack_frames();
    if (this_present_stack_frames || that_present_stack_frames) {
      if (!(this_present_stack_frames && that_present_stack_frames))
        return false;
      if (!this.stack_frames.equals(that.stack_frames))
        return false;
    }

    boolean this_present_payload_json = true && this.isSetPayload_json();
    boolean that_present_payload_json = true && that.isSetPayload_json();
    if (this_present_payload_json || that_present_payload_json) {
      if (!(this_present_payload_json && that_present_payload_json))
        return false;
      if (!this.payload_json.equals(that.payload_json))
        return false;
    }

    boolean this_present_error_flag = true && this.isSetError_flag();
    boolean that_present_error_flag = true && that.isSetError_flag();
    if (this_present_error_flag || that_present_error_flag) {
      if (!(this_present_error_flag && that_present_error_flag))
        return false;
      if (this.error_flag != that.error_flag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_timestamp_micros = true && (isSetTimestamp_micros());
    list.add(present_timestamp_micros);
    if (present_timestamp_micros)
      list.add(timestamp_micros);

    boolean present_runtime_guid = true && (isSetRuntime_guid());
    list.add(present_runtime_guid);
    if (present_runtime_guid)
      list.add(runtime_guid);

    boolean present_span_guid = true && (isSetSpan_guid());
    list.add(present_span_guid);
    if (present_span_guid)
      list.add(span_guid);

    boolean present_stable_name = true && (isSetStable_name());
    list.add(present_stable_name);
    if (present_stable_name)
      list.add(stable_name);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_level = true && (isSetLevel());
    list.add(present_level);
    if (present_level)
      list.add(level);

    boolean present_thread_id = true && (isSetThread_id());
    list.add(present_thread_id);
    if (present_thread_id)
      list.add(thread_id);

    boolean present_filename = true && (isSetFilename());
    list.add(present_filename);
    if (present_filename)
      list.add(filename);

    boolean present_line_number = true && (isSetLine_number());
    list.add(present_line_number);
    if (present_line_number)
      list.add(line_number);

    boolean present_stack_frames = true && (isSetStack_frames());
    list.add(present_stack_frames);
    if (present_stack_frames)
      list.add(stack_frames);

    boolean present_payload_json = true && (isSetPayload_json());
    list.add(present_payload_json);
    if (present_payload_json)
      list.add(payload_json);

    boolean present_error_flag = true && (isSetError_flag());
    list.add(present_error_flag);
    if (present_error_flag)
      list.add(error_flag);

    return list.hashCode();
  }

  @Override
  public int compareTo(LogRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp_micros()).compareTo(other.isSetTimestamp_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp_micros, other.timestamp_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_guid()).compareTo(other.isSetRuntime_guid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_guid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_guid, other.runtime_guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_guid()).compareTo(other.isSetSpan_guid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_guid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_guid, other.span_guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStable_name()).compareTo(other.isSetStable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stable_name, other.stable_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThread_id()).compareTo(other.isSetThread_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThread_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread_id, other.thread_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLine_number()).compareTo(other.isSetLine_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_number, other.line_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStack_frames()).compareTo(other.isSetStack_frames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStack_frames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stack_frames, other.stack_frames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayload_json()).compareTo(other.isSetPayload_json());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload_json()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload_json, other.payload_json);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_flag()).compareTo(other.isSetError_flag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_flag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_flag, other.error_flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LogRecord(");
    boolean first = true;

    if (isSetTimestamp_micros()) {
      sb.append("timestamp_micros:");
      sb.append(this.timestamp_micros);
      first = false;
    }
    if (isSetRuntime_guid()) {
      if (!first) sb.append(", ");
      sb.append("runtime_guid:");
      if (this.runtime_guid == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_guid);
      }
      first = false;
    }
    if (isSetSpan_guid()) {
      if (!first) sb.append(", ");
      sb.append("span_guid:");
      if (this.span_guid == null) {
        sb.append("null");
      } else {
        sb.append(this.span_guid);
      }
      first = false;
    }
    if (isSetStable_name()) {
      if (!first) sb.append(", ");
      sb.append("stable_name:");
      if (this.stable_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stable_name);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
    }
    if (isSetThread_id()) {
      if (!first) sb.append(", ");
      sb.append("thread_id:");
      sb.append(this.thread_id);
      first = false;
    }
    if (isSetFilename()) {
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
    }
    if (isSetLine_number()) {
      if (!first) sb.append(", ");
      sb.append("line_number:");
      sb.append(this.line_number);
      first = false;
    }
    if (isSetStack_frames()) {
      if (!first) sb.append(", ");
      sb.append("stack_frames:");
      if (this.stack_frames == null) {
        sb.append("null");
      } else {
        sb.append(this.stack_frames);
      }
      first = false;
    }
    if (isSetPayload_json()) {
      if (!first) sb.append(", ");
      sb.append("payload_json:");
      if (this.payload_json == null) {
        sb.append("null");
      } else {
        sb.append(this.payload_json);
      }
      first = false;
    }
    if (isSetError_flag()) {
      if (!first) sb.append(", ");
      sb.append("error_flag:");
      sb.append(this.error_flag);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogRecordStandardSchemeFactory implements SchemeFactory {
    public LogRecordStandardScheme getScheme() {
      return new LogRecordStandardScheme();
    }
  }

  private static class LogRecordStandardScheme extends StandardScheme<LogRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp_micros = iprot.readI64();
              struct.setTimestamp_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RUNTIME_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runtime_guid = iprot.readString();
              struct.setRuntime_guidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.span_guid = iprot.readString();
              struct.setSpan_guidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stable_name = iprot.readString();
              struct.setStable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.level = iprot.readString();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.thread_id = iprot.readI64();
              struct.setThread_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LINE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.line_number = iprot.readI64();
              struct.setLine_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STACK_FRAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.stack_frames = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.stack_frames.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setStack_framesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAYLOAD_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payload_json = iprot.readString();
              struct.setPayload_jsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ERROR_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.error_flag = iprot.readBool();
              struct.setError_flagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTimestamp_micros()) {
        oprot.writeFieldBegin(TIMESTAMP_MICROS_FIELD_DESC);
        oprot.writeI64(struct.timestamp_micros);
        oprot.writeFieldEnd();
      }
      if (struct.runtime_guid != null) {
        if (struct.isSetRuntime_guid()) {
          oprot.writeFieldBegin(RUNTIME_GUID_FIELD_DESC);
          oprot.writeString(struct.runtime_guid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.span_guid != null) {
        if (struct.isSetSpan_guid()) {
          oprot.writeFieldBegin(SPAN_GUID_FIELD_DESC);
          oprot.writeString(struct.span_guid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stable_name != null) {
        if (struct.isSetStable_name()) {
          oprot.writeFieldBegin(STABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.stable_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.level != null) {
        if (struct.isSetLevel()) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeString(struct.level);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThread_id()) {
        oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
        oprot.writeI64(struct.thread_id);
        oprot.writeFieldEnd();
      }
      if (struct.filename != null) {
        if (struct.isSetFilename()) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLine_number()) {
        oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.line_number);
        oprot.writeFieldEnd();
      }
      if (struct.stack_frames != null) {
        if (struct.isSetStack_frames()) {
          oprot.writeFieldBegin(STACK_FRAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stack_frames.size()));
            for (String _iter11 : struct.stack_frames)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.payload_json != null) {
        if (struct.isSetPayload_json()) {
          oprot.writeFieldBegin(PAYLOAD_JSON_FIELD_DESC);
          oprot.writeString(struct.payload_json);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetError_flag()) {
        oprot.writeFieldBegin(ERROR_FLAG_FIELD_DESC);
        oprot.writeBool(struct.error_flag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogRecordTupleSchemeFactory implements SchemeFactory {
    public LogRecordTupleScheme getScheme() {
      return new LogRecordTupleScheme();
    }
  }

  private static class LogRecordTupleScheme extends TupleScheme<LogRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp_micros()) {
        optionals.set(0);
      }
      if (struct.isSetRuntime_guid()) {
        optionals.set(1);
      }
      if (struct.isSetSpan_guid()) {
        optionals.set(2);
      }
      if (struct.isSetStable_name()) {
        optionals.set(3);
      }
      if (struct.isSetMessage()) {
        optionals.set(4);
      }
      if (struct.isSetLevel()) {
        optionals.set(5);
      }
      if (struct.isSetThread_id()) {
        optionals.set(6);
      }
      if (struct.isSetFilename()) {
        optionals.set(7);
      }
      if (struct.isSetLine_number()) {
        optionals.set(8);
      }
      if (struct.isSetStack_frames()) {
        optionals.set(9);
      }
      if (struct.isSetPayload_json()) {
        optionals.set(10);
      }
      if (struct.isSetError_flag()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTimestamp_micros()) {
        oprot.writeI64(struct.timestamp_micros);
      }
      if (struct.isSetRuntime_guid()) {
        oprot.writeString(struct.runtime_guid);
      }
      if (struct.isSetSpan_guid()) {
        oprot.writeString(struct.span_guid);
      }
      if (struct.isSetStable_name()) {
        oprot.writeString(struct.stable_name);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetLevel()) {
        oprot.writeString(struct.level);
      }
      if (struct.isSetThread_id()) {
        oprot.writeI64(struct.thread_id);
      }
      if (struct.isSetFilename()) {
        oprot.writeString(struct.filename);
      }
      if (struct.isSetLine_number()) {
        oprot.writeI64(struct.line_number);
      }
      if (struct.isSetStack_frames()) {
        {
          oprot.writeI32(struct.stack_frames.size());
          for (String _iter12 : struct.stack_frames)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetPayload_json()) {
        oprot.writeString(struct.payload_json);
      }
      if (struct.isSetError_flag()) {
        oprot.writeBool(struct.error_flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.timestamp_micros = iprot.readI64();
        struct.setTimestamp_microsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.runtime_guid = iprot.readString();
        struct.setRuntime_guidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.span_guid = iprot.readString();
        struct.setSpan_guidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stable_name = iprot.readString();
        struct.setStable_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.level = iprot.readString();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.thread_id = iprot.readI64();
        struct.setThread_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.filename = iprot.readString();
        struct.setFilenameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.line_number = iprot.readI64();
        struct.setLine_numberIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stack_frames = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.stack_frames.add(_elem14);
          }
        }
        struct.setStack_framesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.payload_json = iprot.readString();
        struct.setPayload_jsonIsSet(true);
      }
      if (incoming.get(11)) {
        struct.error_flag = iprot.readBool();
        struct.setError_flagIsSet(true);
      }
    }
  }

}

