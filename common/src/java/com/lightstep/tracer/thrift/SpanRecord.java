/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lightstep.tracer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-13")
public class SpanRecord implements org.apache.thrift.TBase<SpanRecord, SpanRecord._Fields>, java.io.Serializable, Cloneable, Comparable<SpanRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpanRecord");

  private static final org.apache.thrift.protocol.TField SPAN_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("span_guid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRACE_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_guid", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RUNTIME_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_guid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("span_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField JOIN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("join_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OLDEST_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldest_micros", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField YOUNGEST_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("youngest_micros", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_flag", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField LOG_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("log_records", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanRecordTupleSchemeFactory());
  }

  public String span_guid; // optional
  public String trace_guid; // optional
  public String runtime_guid; // optional
  public String span_name; // optional
  public List<TraceJoinId> join_ids; // optional
  public long oldest_micros; // optional
  public long youngest_micros; // optional
  public List<KeyValue> attributes; // optional
  public boolean error_flag; // optional
  public List<LogRecord> log_records; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPAN_GUID((short)1, "span_guid"),
    TRACE_GUID((short)11, "trace_guid"),
    RUNTIME_GUID((short)2, "runtime_guid"),
    SPAN_NAME((short)3, "span_name"),
    JOIN_IDS((short)4, "join_ids"),
    OLDEST_MICROS((short)5, "oldest_micros"),
    YOUNGEST_MICROS((short)6, "youngest_micros"),
    ATTRIBUTES((short)8, "attributes"),
    ERROR_FLAG((short)9, "error_flag"),
    LOG_RECORDS((short)10, "log_records");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPAN_GUID
          return SPAN_GUID;
        case 11: // TRACE_GUID
          return TRACE_GUID;
        case 2: // RUNTIME_GUID
          return RUNTIME_GUID;
        case 3: // SPAN_NAME
          return SPAN_NAME;
        case 4: // JOIN_IDS
          return JOIN_IDS;
        case 5: // OLDEST_MICROS
          return OLDEST_MICROS;
        case 6: // YOUNGEST_MICROS
          return YOUNGEST_MICROS;
        case 8: // ATTRIBUTES
          return ATTRIBUTES;
        case 9: // ERROR_FLAG
          return ERROR_FLAG;
        case 10: // LOG_RECORDS
          return LOG_RECORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OLDEST_MICROS_ISSET_ID = 0;
  private static final int __YOUNGEST_MICROS_ISSET_ID = 1;
  private static final int __ERROR_FLAG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPAN_GUID,_Fields.TRACE_GUID,_Fields.RUNTIME_GUID,_Fields.SPAN_NAME,_Fields.JOIN_IDS,_Fields.OLDEST_MICROS,_Fields.YOUNGEST_MICROS,_Fields.ATTRIBUTES,_Fields.ERROR_FLAG,_Fields.LOG_RECORDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPAN_GUID, new org.apache.thrift.meta_data.FieldMetaData("span_guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_GUID, new org.apache.thrift.meta_data.FieldMetaData("trace_guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNTIME_GUID, new org.apache.thrift.meta_data.FieldMetaData("runtime_guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("span_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOIN_IDS, new org.apache.thrift.meta_data.FieldMetaData("join_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TraceJoinId.class))));
    tmpMap.put(_Fields.OLDEST_MICROS, new org.apache.thrift.meta_data.FieldMetaData("oldest_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.YOUNGEST_MICROS, new org.apache.thrift.meta_data.FieldMetaData("youngest_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
    tmpMap.put(_Fields.ERROR_FLAG, new org.apache.thrift.meta_data.FieldMetaData("error_flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOG_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("log_records", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogRecord.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpanRecord.class, metaDataMap);
  }

  public SpanRecord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpanRecord(SpanRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSpan_guid()) {
      this.span_guid = other.span_guid;
    }
    if (other.isSetTrace_guid()) {
      this.trace_guid = other.trace_guid;
    }
    if (other.isSetRuntime_guid()) {
      this.runtime_guid = other.runtime_guid;
    }
    if (other.isSetSpan_name()) {
      this.span_name = other.span_name;
    }
    if (other.isSetJoin_ids()) {
      List<TraceJoinId> __this__join_ids = new ArrayList<TraceJoinId>(other.join_ids.size());
      for (TraceJoinId other_element : other.join_ids) {
        __this__join_ids.add(new TraceJoinId(other_element));
      }
      this.join_ids = __this__join_ids;
    }
    this.oldest_micros = other.oldest_micros;
    this.youngest_micros = other.youngest_micros;
    if (other.isSetAttributes()) {
      List<KeyValue> __this__attributes = new ArrayList<KeyValue>(other.attributes.size());
      for (KeyValue other_element : other.attributes) {
        __this__attributes.add(new KeyValue(other_element));
      }
      this.attributes = __this__attributes;
    }
    this.error_flag = other.error_flag;
    if (other.isSetLog_records()) {
      List<LogRecord> __this__log_records = new ArrayList<LogRecord>(other.log_records.size());
      for (LogRecord other_element : other.log_records) {
        __this__log_records.add(new LogRecord(other_element));
      }
      this.log_records = __this__log_records;
    }
  }

  public SpanRecord deepCopy() {
    return new SpanRecord(this);
  }

  @Override
  public void clear() {
    this.span_guid = null;
    this.trace_guid = null;
    this.runtime_guid = null;
    this.span_name = null;
    this.join_ids = null;
    setOldest_microsIsSet(false);
    this.oldest_micros = 0;
    setYoungest_microsIsSet(false);
    this.youngest_micros = 0;
    this.attributes = null;
    setError_flagIsSet(false);
    this.error_flag = false;
    this.log_records = null;
  }

  public String getSpan_guid() {
    return this.span_guid;
  }

  public SpanRecord setSpan_guid(String span_guid) {
    this.span_guid = span_guid;
    return this;
  }

  public void unsetSpan_guid() {
    this.span_guid = null;
  }

  /** Returns true if field span_guid is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_guid() {
    return this.span_guid != null;
  }

  public void setSpan_guidIsSet(boolean value) {
    if (!value) {
      this.span_guid = null;
    }
  }

  public String getTrace_guid() {
    return this.trace_guid;
  }

  public SpanRecord setTrace_guid(String trace_guid) {
    this.trace_guid = trace_guid;
    return this;
  }

  public void unsetTrace_guid() {
    this.trace_guid = null;
  }

  /** Returns true if field trace_guid is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace_guid() {
    return this.trace_guid != null;
  }

  public void setTrace_guidIsSet(boolean value) {
    if (!value) {
      this.trace_guid = null;
    }
  }

  public String getRuntime_guid() {
    return this.runtime_guid;
  }

  public SpanRecord setRuntime_guid(String runtime_guid) {
    this.runtime_guid = runtime_guid;
    return this;
  }

  public void unsetRuntime_guid() {
    this.runtime_guid = null;
  }

  /** Returns true if field runtime_guid is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_guid() {
    return this.runtime_guid != null;
  }

  public void setRuntime_guidIsSet(boolean value) {
    if (!value) {
      this.runtime_guid = null;
    }
  }

  public String getSpan_name() {
    return this.span_name;
  }

  public SpanRecord setSpan_name(String span_name) {
    this.span_name = span_name;
    return this;
  }

  public void unsetSpan_name() {
    this.span_name = null;
  }

  /** Returns true if field span_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_name() {
    return this.span_name != null;
  }

  public void setSpan_nameIsSet(boolean value) {
    if (!value) {
      this.span_name = null;
    }
  }

  public int getJoin_idsSize() {
    return (this.join_ids == null) ? 0 : this.join_ids.size();
  }

  public java.util.Iterator<TraceJoinId> getJoin_idsIterator() {
    return (this.join_ids == null) ? null : this.join_ids.iterator();
  }

  public void addToJoin_ids(TraceJoinId elem) {
    if (this.join_ids == null) {
      this.join_ids = new ArrayList<TraceJoinId>();
    }
    this.join_ids.add(elem);
  }

  public List<TraceJoinId> getJoin_ids() {
    return this.join_ids;
  }

  public SpanRecord setJoin_ids(List<TraceJoinId> join_ids) {
    this.join_ids = join_ids;
    return this;
  }

  public void unsetJoin_ids() {
    this.join_ids = null;
  }

  /** Returns true if field join_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_ids() {
    return this.join_ids != null;
  }

  public void setJoin_idsIsSet(boolean value) {
    if (!value) {
      this.join_ids = null;
    }
  }

  public long getOldest_micros() {
    return this.oldest_micros;
  }

  public SpanRecord setOldest_micros(long oldest_micros) {
    this.oldest_micros = oldest_micros;
    setOldest_microsIsSet(true);
    return this;
  }

  public void unsetOldest_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDEST_MICROS_ISSET_ID);
  }

  /** Returns true if field oldest_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetOldest_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDEST_MICROS_ISSET_ID);
  }

  public void setOldest_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDEST_MICROS_ISSET_ID, value);
  }

  public long getYoungest_micros() {
    return this.youngest_micros;
  }

  public SpanRecord setYoungest_micros(long youngest_micros) {
    this.youngest_micros = youngest_micros;
    setYoungest_microsIsSet(true);
    return this;
  }

  public void unsetYoungest_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YOUNGEST_MICROS_ISSET_ID);
  }

  /** Returns true if field youngest_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetYoungest_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __YOUNGEST_MICROS_ISSET_ID);
  }

  public void setYoungest_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YOUNGEST_MICROS_ISSET_ID, value);
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public java.util.Iterator<KeyValue> getAttributesIterator() {
    return (this.attributes == null) ? null : this.attributes.iterator();
  }

  public void addToAttributes(KeyValue elem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<KeyValue>();
    }
    this.attributes.add(elem);
  }

  public List<KeyValue> getAttributes() {
    return this.attributes;
  }

  public SpanRecord setAttributes(List<KeyValue> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public boolean isError_flag() {
    return this.error_flag;
  }

  public SpanRecord setError_flag(boolean error_flag) {
    this.error_flag = error_flag;
    setError_flagIsSet(true);
    return this;
  }

  public void unsetError_flag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERROR_FLAG_ISSET_ID);
  }

  /** Returns true if field error_flag is set (has been assigned a value) and false otherwise */
  public boolean isSetError_flag() {
    return EncodingUtils.testBit(__isset_bitfield, __ERROR_FLAG_ISSET_ID);
  }

  public void setError_flagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERROR_FLAG_ISSET_ID, value);
  }

  public int getLog_recordsSize() {
    return (this.log_records == null) ? 0 : this.log_records.size();
  }

  public java.util.Iterator<LogRecord> getLog_recordsIterator() {
    return (this.log_records == null) ? null : this.log_records.iterator();
  }

  public void addToLog_records(LogRecord elem) {
    if (this.log_records == null) {
      this.log_records = new ArrayList<LogRecord>();
    }
    this.log_records.add(elem);
  }

  public List<LogRecord> getLog_records() {
    return this.log_records;
  }

  public SpanRecord setLog_records(List<LogRecord> log_records) {
    this.log_records = log_records;
    return this;
  }

  public void unsetLog_records() {
    this.log_records = null;
  }

  /** Returns true if field log_records is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_records() {
    return this.log_records != null;
  }

  public void setLog_recordsIsSet(boolean value) {
    if (!value) {
      this.log_records = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPAN_GUID:
      if (value == null) {
        unsetSpan_guid();
      } else {
        setSpan_guid((String)value);
      }
      break;

    case TRACE_GUID:
      if (value == null) {
        unsetTrace_guid();
      } else {
        setTrace_guid((String)value);
      }
      break;

    case RUNTIME_GUID:
      if (value == null) {
        unsetRuntime_guid();
      } else {
        setRuntime_guid((String)value);
      }
      break;

    case SPAN_NAME:
      if (value == null) {
        unsetSpan_name();
      } else {
        setSpan_name((String)value);
      }
      break;

    case JOIN_IDS:
      if (value == null) {
        unsetJoin_ids();
      } else {
        setJoin_ids((List<TraceJoinId>)value);
      }
      break;

    case OLDEST_MICROS:
      if (value == null) {
        unsetOldest_micros();
      } else {
        setOldest_micros((Long)value);
      }
      break;

    case YOUNGEST_MICROS:
      if (value == null) {
        unsetYoungest_micros();
      } else {
        setYoungest_micros((Long)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((List<KeyValue>)value);
      }
      break;

    case ERROR_FLAG:
      if (value == null) {
        unsetError_flag();
      } else {
        setError_flag((Boolean)value);
      }
      break;

    case LOG_RECORDS:
      if (value == null) {
        unsetLog_records();
      } else {
        setLog_records((List<LogRecord>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPAN_GUID:
      return getSpan_guid();

    case TRACE_GUID:
      return getTrace_guid();

    case RUNTIME_GUID:
      return getRuntime_guid();

    case SPAN_NAME:
      return getSpan_name();

    case JOIN_IDS:
      return getJoin_ids();

    case OLDEST_MICROS:
      return Long.valueOf(getOldest_micros());

    case YOUNGEST_MICROS:
      return Long.valueOf(getYoungest_micros());

    case ATTRIBUTES:
      return getAttributes();

    case ERROR_FLAG:
      return Boolean.valueOf(isError_flag());

    case LOG_RECORDS:
      return getLog_records();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPAN_GUID:
      return isSetSpan_guid();
    case TRACE_GUID:
      return isSetTrace_guid();
    case RUNTIME_GUID:
      return isSetRuntime_guid();
    case SPAN_NAME:
      return isSetSpan_name();
    case JOIN_IDS:
      return isSetJoin_ids();
    case OLDEST_MICROS:
      return isSetOldest_micros();
    case YOUNGEST_MICROS:
      return isSetYoungest_micros();
    case ATTRIBUTES:
      return isSetAttributes();
    case ERROR_FLAG:
      return isSetError_flag();
    case LOG_RECORDS:
      return isSetLog_records();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpanRecord)
      return this.equals((SpanRecord)that);
    return false;
  }

  public boolean equals(SpanRecord that) {
    if (that == null)
      return false;

    boolean this_present_span_guid = true && this.isSetSpan_guid();
    boolean that_present_span_guid = true && that.isSetSpan_guid();
    if (this_present_span_guid || that_present_span_guid) {
      if (!(this_present_span_guid && that_present_span_guid))
        return false;
      if (!this.span_guid.equals(that.span_guid))
        return false;
    }

    boolean this_present_trace_guid = true && this.isSetTrace_guid();
    boolean that_present_trace_guid = true && that.isSetTrace_guid();
    if (this_present_trace_guid || that_present_trace_guid) {
      if (!(this_present_trace_guid && that_present_trace_guid))
        return false;
      if (!this.trace_guid.equals(that.trace_guid))
        return false;
    }

    boolean this_present_runtime_guid = true && this.isSetRuntime_guid();
    boolean that_present_runtime_guid = true && that.isSetRuntime_guid();
    if (this_present_runtime_guid || that_present_runtime_guid) {
      if (!(this_present_runtime_guid && that_present_runtime_guid))
        return false;
      if (!this.runtime_guid.equals(that.runtime_guid))
        return false;
    }

    boolean this_present_span_name = true && this.isSetSpan_name();
    boolean that_present_span_name = true && that.isSetSpan_name();
    if (this_present_span_name || that_present_span_name) {
      if (!(this_present_span_name && that_present_span_name))
        return false;
      if (!this.span_name.equals(that.span_name))
        return false;
    }

    boolean this_present_join_ids = true && this.isSetJoin_ids();
    boolean that_present_join_ids = true && that.isSetJoin_ids();
    if (this_present_join_ids || that_present_join_ids) {
      if (!(this_present_join_ids && that_present_join_ids))
        return false;
      if (!this.join_ids.equals(that.join_ids))
        return false;
    }

    boolean this_present_oldest_micros = true && this.isSetOldest_micros();
    boolean that_present_oldest_micros = true && that.isSetOldest_micros();
    if (this_present_oldest_micros || that_present_oldest_micros) {
      if (!(this_present_oldest_micros && that_present_oldest_micros))
        return false;
      if (this.oldest_micros != that.oldest_micros)
        return false;
    }

    boolean this_present_youngest_micros = true && this.isSetYoungest_micros();
    boolean that_present_youngest_micros = true && that.isSetYoungest_micros();
    if (this_present_youngest_micros || that_present_youngest_micros) {
      if (!(this_present_youngest_micros && that_present_youngest_micros))
        return false;
      if (this.youngest_micros != that.youngest_micros)
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_error_flag = true && this.isSetError_flag();
    boolean that_present_error_flag = true && that.isSetError_flag();
    if (this_present_error_flag || that_present_error_flag) {
      if (!(this_present_error_flag && that_present_error_flag))
        return false;
      if (this.error_flag != that.error_flag)
        return false;
    }

    boolean this_present_log_records = true && this.isSetLog_records();
    boolean that_present_log_records = true && that.isSetLog_records();
    if (this_present_log_records || that_present_log_records) {
      if (!(this_present_log_records && that_present_log_records))
        return false;
      if (!this.log_records.equals(that.log_records))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_span_guid = true && (isSetSpan_guid());
    list.add(present_span_guid);
    if (present_span_guid)
      list.add(span_guid);

    boolean present_trace_guid = true && (isSetTrace_guid());
    list.add(present_trace_guid);
    if (present_trace_guid)
      list.add(trace_guid);

    boolean present_runtime_guid = true && (isSetRuntime_guid());
    list.add(present_runtime_guid);
    if (present_runtime_guid)
      list.add(runtime_guid);

    boolean present_span_name = true && (isSetSpan_name());
    list.add(present_span_name);
    if (present_span_name)
      list.add(span_name);

    boolean present_join_ids = true && (isSetJoin_ids());
    list.add(present_join_ids);
    if (present_join_ids)
      list.add(join_ids);

    boolean present_oldest_micros = true && (isSetOldest_micros());
    list.add(present_oldest_micros);
    if (present_oldest_micros)
      list.add(oldest_micros);

    boolean present_youngest_micros = true && (isSetYoungest_micros());
    list.add(present_youngest_micros);
    if (present_youngest_micros)
      list.add(youngest_micros);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    boolean present_error_flag = true && (isSetError_flag());
    list.add(present_error_flag);
    if (present_error_flag)
      list.add(error_flag);

    boolean present_log_records = true && (isSetLog_records());
    list.add(present_log_records);
    if (present_log_records)
      list.add(log_records);

    return list.hashCode();
  }

  @Override
  public int compareTo(SpanRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpan_guid()).compareTo(other.isSetSpan_guid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_guid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_guid, other.span_guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrace_guid()).compareTo(other.isSetTrace_guid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_guid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_guid, other.trace_guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_guid()).compareTo(other.isSetRuntime_guid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_guid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_guid, other.runtime_guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_name()).compareTo(other.isSetSpan_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_name, other.span_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoin_ids()).compareTo(other.isSetJoin_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_ids, other.join_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldest_micros()).compareTo(other.isSetOldest_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldest_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldest_micros, other.oldest_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYoungest_micros()).compareTo(other.isSetYoungest_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYoungest_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.youngest_micros, other.youngest_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_flag()).compareTo(other.isSetError_flag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_flag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_flag, other.error_flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_records()).compareTo(other.isSetLog_records());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_records()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_records, other.log_records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpanRecord(");
    boolean first = true;

    if (isSetSpan_guid()) {
      sb.append("span_guid:");
      if (this.span_guid == null) {
        sb.append("null");
      } else {
        sb.append(this.span_guid);
      }
      first = false;
    }
    if (isSetTrace_guid()) {
      if (!first) sb.append(", ");
      sb.append("trace_guid:");
      if (this.trace_guid == null) {
        sb.append("null");
      } else {
        sb.append(this.trace_guid);
      }
      first = false;
    }
    if (isSetRuntime_guid()) {
      if (!first) sb.append(", ");
      sb.append("runtime_guid:");
      if (this.runtime_guid == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_guid);
      }
      first = false;
    }
    if (isSetSpan_name()) {
      if (!first) sb.append(", ");
      sb.append("span_name:");
      if (this.span_name == null) {
        sb.append("null");
      } else {
        sb.append(this.span_name);
      }
      first = false;
    }
    if (isSetJoin_ids()) {
      if (!first) sb.append(", ");
      sb.append("join_ids:");
      if (this.join_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.join_ids);
      }
      first = false;
    }
    if (isSetOldest_micros()) {
      if (!first) sb.append(", ");
      sb.append("oldest_micros:");
      sb.append(this.oldest_micros);
      first = false;
    }
    if (isSetYoungest_micros()) {
      if (!first) sb.append(", ");
      sb.append("youngest_micros:");
      sb.append(this.youngest_micros);
      first = false;
    }
    if (isSetAttributes()) {
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
    }
    if (isSetError_flag()) {
      if (!first) sb.append(", ");
      sb.append("error_flag:");
      sb.append(this.error_flag);
      first = false;
    }
    if (isSetLog_records()) {
      if (!first) sb.append(", ");
      sb.append("log_records:");
      if (this.log_records == null) {
        sb.append("null");
      } else {
        sb.append(this.log_records);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanRecordStandardSchemeFactory implements SchemeFactory {
    public SpanRecordStandardScheme getScheme() {
      return new SpanRecordStandardScheme();
    }
  }

  private static class SpanRecordStandardScheme extends StandardScheme<SpanRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpanRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPAN_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.span_guid = iprot.readString();
              struct.setSpan_guidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRACE_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trace_guid = iprot.readString();
              struct.setTrace_guidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RUNTIME_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runtime_guid = iprot.readString();
              struct.setRuntime_guidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.span_name = iprot.readString();
              struct.setSpan_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOIN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.join_ids = new ArrayList<TraceJoinId>(_list16.size);
                TraceJoinId _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new TraceJoinId();
                  _elem17.read(iprot);
                  struct.join_ids.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setJoin_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OLDEST_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oldest_micros = iprot.readI64();
              struct.setOldest_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // YOUNGEST_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.youngest_micros = iprot.readI64();
              struct.setYoungest_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.attributes = new ArrayList<KeyValue>(_list19.size);
                KeyValue _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new KeyValue();
                  _elem20.read(iprot);
                  struct.attributes.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.error_flag = iprot.readBool();
              struct.setError_flagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOG_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.log_records = new ArrayList<LogRecord>(_list22.size);
                LogRecord _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new LogRecord();
                  _elem23.read(iprot);
                  struct.log_records.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setLog_recordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpanRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.span_guid != null) {
        if (struct.isSetSpan_guid()) {
          oprot.writeFieldBegin(SPAN_GUID_FIELD_DESC);
          oprot.writeString(struct.span_guid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runtime_guid != null) {
        if (struct.isSetRuntime_guid()) {
          oprot.writeFieldBegin(RUNTIME_GUID_FIELD_DESC);
          oprot.writeString(struct.runtime_guid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.span_name != null) {
        if (struct.isSetSpan_name()) {
          oprot.writeFieldBegin(SPAN_NAME_FIELD_DESC);
          oprot.writeString(struct.span_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.join_ids != null) {
        if (struct.isSetJoin_ids()) {
          oprot.writeFieldBegin(JOIN_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.join_ids.size()));
            for (TraceJoinId _iter25 : struct.join_ids)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOldest_micros()) {
        oprot.writeFieldBegin(OLDEST_MICROS_FIELD_DESC);
        oprot.writeI64(struct.oldest_micros);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYoungest_micros()) {
        oprot.writeFieldBegin(YOUNGEST_MICROS_FIELD_DESC);
        oprot.writeI64(struct.youngest_micros);
        oprot.writeFieldEnd();
      }
      if (struct.attributes != null) {
        if (struct.isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attributes.size()));
            for (KeyValue _iter26 : struct.attributes)
            {
              _iter26.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetError_flag()) {
        oprot.writeFieldBegin(ERROR_FLAG_FIELD_DESC);
        oprot.writeBool(struct.error_flag);
        oprot.writeFieldEnd();
      }
      if (struct.log_records != null) {
        if (struct.isSetLog_records()) {
          oprot.writeFieldBegin(LOG_RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.log_records.size()));
            for (LogRecord _iter27 : struct.log_records)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.trace_guid != null) {
        if (struct.isSetTrace_guid()) {
          oprot.writeFieldBegin(TRACE_GUID_FIELD_DESC);
          oprot.writeString(struct.trace_guid);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanRecordTupleSchemeFactory implements SchemeFactory {
    public SpanRecordTupleScheme getScheme() {
      return new SpanRecordTupleScheme();
    }
  }

  private static class SpanRecordTupleScheme extends TupleScheme<SpanRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpanRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSpan_guid()) {
        optionals.set(0);
      }
      if (struct.isSetTrace_guid()) {
        optionals.set(1);
      }
      if (struct.isSetRuntime_guid()) {
        optionals.set(2);
      }
      if (struct.isSetSpan_name()) {
        optionals.set(3);
      }
      if (struct.isSetJoin_ids()) {
        optionals.set(4);
      }
      if (struct.isSetOldest_micros()) {
        optionals.set(5);
      }
      if (struct.isSetYoungest_micros()) {
        optionals.set(6);
      }
      if (struct.isSetAttributes()) {
        optionals.set(7);
      }
      if (struct.isSetError_flag()) {
        optionals.set(8);
      }
      if (struct.isSetLog_records()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSpan_guid()) {
        oprot.writeString(struct.span_guid);
      }
      if (struct.isSetTrace_guid()) {
        oprot.writeString(struct.trace_guid);
      }
      if (struct.isSetRuntime_guid()) {
        oprot.writeString(struct.runtime_guid);
      }
      if (struct.isSetSpan_name()) {
        oprot.writeString(struct.span_name);
      }
      if (struct.isSetJoin_ids()) {
        {
          oprot.writeI32(struct.join_ids.size());
          for (TraceJoinId _iter28 : struct.join_ids)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetOldest_micros()) {
        oprot.writeI64(struct.oldest_micros);
      }
      if (struct.isSetYoungest_micros()) {
        oprot.writeI64(struct.youngest_micros);
      }
      if (struct.isSetAttributes()) {
        {
          oprot.writeI32(struct.attributes.size());
          for (KeyValue _iter29 : struct.attributes)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetError_flag()) {
        oprot.writeBool(struct.error_flag);
      }
      if (struct.isSetLog_records()) {
        {
          oprot.writeI32(struct.log_records.size());
          for (LogRecord _iter30 : struct.log_records)
          {
            _iter30.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpanRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.span_guid = iprot.readString();
        struct.setSpan_guidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.trace_guid = iprot.readString();
        struct.setTrace_guidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.runtime_guid = iprot.readString();
        struct.setRuntime_guidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.span_name = iprot.readString();
        struct.setSpan_nameIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.join_ids = new ArrayList<TraceJoinId>(_list31.size);
          TraceJoinId _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new TraceJoinId();
            _elem32.read(iprot);
            struct.join_ids.add(_elem32);
          }
        }
        struct.setJoin_idsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.oldest_micros = iprot.readI64();
        struct.setOldest_microsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.youngest_micros = iprot.readI64();
        struct.setYoungest_microsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.attributes = new ArrayList<KeyValue>(_list34.size);
          KeyValue _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new KeyValue();
            _elem35.read(iprot);
            struct.attributes.add(_elem35);
          }
        }
        struct.setAttributesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.error_flag = iprot.readBool();
        struct.setError_flagIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.log_records = new ArrayList<LogRecord>(_list37.size);
          LogRecord _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new LogRecord();
            _elem38.read(iprot);
            struct.log_records.add(_elem38);
          }
        }
        struct.setLog_recordsIsSet(true);
      }
    }
  }

}

