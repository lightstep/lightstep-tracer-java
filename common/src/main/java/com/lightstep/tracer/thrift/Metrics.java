/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lightstep.tracer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-13")
public class Metrics implements org.apache.thrift.TBase<Metrics, Metrics._Fields>, java.io.Serializable, Cloneable, Comparable<Metrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Metrics");

  private static final org.apache.thrift.protocol.TField COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("counts", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField GAUGES_FIELD_DESC = new org.apache.thrift.protocol.TField("gauges", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricsTupleSchemeFactory());
  }

  public List<MetricsSample> counts; // optional
  public List<MetricsSample> gauges; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNTS((short)1, "counts"),
    GAUGES((short)2, "gauges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNTS
          return COUNTS;
        case 2: // GAUGES
          return GAUGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COUNTS,_Fields.GAUGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNTS, new org.apache.thrift.meta_data.FieldMetaData("counts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricsSample.class))));
    tmpMap.put(_Fields.GAUGES, new org.apache.thrift.meta_data.FieldMetaData("gauges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricsSample.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Metrics.class, metaDataMap);
  }

  public Metrics() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Metrics(Metrics other) {
    if (other.isSetCounts()) {
      List<MetricsSample> __this__counts = new ArrayList<MetricsSample>(other.counts.size());
      for (MetricsSample other_element : other.counts) {
        __this__counts.add(new MetricsSample(other_element));
      }
      this.counts = __this__counts;
    }
    if (other.isSetGauges()) {
      List<MetricsSample> __this__gauges = new ArrayList<MetricsSample>(other.gauges.size());
      for (MetricsSample other_element : other.gauges) {
        __this__gauges.add(new MetricsSample(other_element));
      }
      this.gauges = __this__gauges;
    }
  }

  public Metrics deepCopy() {
    return new Metrics(this);
  }

  @Override
  public void clear() {
    this.counts = null;
    this.gauges = null;
  }

  public int getCountsSize() {
    return (this.counts == null) ? 0 : this.counts.size();
  }

  public java.util.Iterator<MetricsSample> getCountsIterator() {
    return (this.counts == null) ? null : this.counts.iterator();
  }

  public void addToCounts(MetricsSample elem) {
    if (this.counts == null) {
      this.counts = new ArrayList<MetricsSample>();
    }
    this.counts.add(elem);
  }

  public List<MetricsSample> getCounts() {
    return this.counts;
  }

  public Metrics setCounts(List<MetricsSample> counts) {
    this.counts = counts;
    return this;
  }

  public void unsetCounts() {
    this.counts = null;
  }

  /** Returns true if field counts is set (has been assigned a value) and false otherwise */
  public boolean isSetCounts() {
    return this.counts != null;
  }

  public void setCountsIsSet(boolean value) {
    if (!value) {
      this.counts = null;
    }
  }

  public int getGaugesSize() {
    return (this.gauges == null) ? 0 : this.gauges.size();
  }

  public java.util.Iterator<MetricsSample> getGaugesIterator() {
    return (this.gauges == null) ? null : this.gauges.iterator();
  }

  public void addToGauges(MetricsSample elem) {
    if (this.gauges == null) {
      this.gauges = new ArrayList<MetricsSample>();
    }
    this.gauges.add(elem);
  }

  public List<MetricsSample> getGauges() {
    return this.gauges;
  }

  public Metrics setGauges(List<MetricsSample> gauges) {
    this.gauges = gauges;
    return this;
  }

  public void unsetGauges() {
    this.gauges = null;
  }

  /** Returns true if field gauges is set (has been assigned a value) and false otherwise */
  public boolean isSetGauges() {
    return this.gauges != null;
  }

  public void setGaugesIsSet(boolean value) {
    if (!value) {
      this.gauges = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNTS:
      if (value == null) {
        unsetCounts();
      } else {
        setCounts((List<MetricsSample>)value);
      }
      break;

    case GAUGES:
      if (value == null) {
        unsetGauges();
      } else {
        setGauges((List<MetricsSample>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNTS:
      return getCounts();

    case GAUGES:
      return getGauges();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNTS:
      return isSetCounts();
    case GAUGES:
      return isSetGauges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Metrics)
      return this.equals((Metrics)that);
    return false;
  }

  public boolean equals(Metrics that) {
    if (that == null)
      return false;

    boolean this_present_counts = true && this.isSetCounts();
    boolean that_present_counts = true && that.isSetCounts();
    if (this_present_counts || that_present_counts) {
      if (!(this_present_counts && that_present_counts))
        return false;
      if (!this.counts.equals(that.counts))
        return false;
    }

    boolean this_present_gauges = true && this.isSetGauges();
    boolean that_present_gauges = true && that.isSetGauges();
    if (this_present_gauges || that_present_gauges) {
      if (!(this_present_gauges && that_present_gauges))
        return false;
      if (!this.gauges.equals(that.gauges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_counts = true && (isSetCounts());
    list.add(present_counts);
    if (present_counts)
      list.add(counts);

    boolean present_gauges = true && (isSetGauges());
    list.add(present_gauges);
    if (present_gauges)
      list.add(gauges);

    return list.hashCode();
  }

  @Override
  public int compareTo(Metrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCounts()).compareTo(other.isSetCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counts, other.counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGauges()).compareTo(other.isSetGauges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGauges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gauges, other.gauges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Metrics(");
    boolean first = true;

    if (isSetCounts()) {
      sb.append("counts:");
      if (this.counts == null) {
        sb.append("null");
      } else {
        sb.append(this.counts);
      }
      first = false;
    }
    if (isSetGauges()) {
      if (!first) sb.append(", ");
      sb.append("gauges:");
      if (this.gauges == null) {
        sb.append("null");
      } else {
        sb.append(this.gauges);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricsStandardSchemeFactory implements SchemeFactory {
    public MetricsStandardScheme getScheme() {
      return new MetricsStandardScheme();
    }
  }

  private static class MetricsStandardScheme extends StandardScheme<Metrics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Metrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.counts = new ArrayList<MetricsSample>(_list40.size);
                MetricsSample _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new MetricsSample();
                  _elem41.read(iprot);
                  struct.counts.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAUGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.gauges = new ArrayList<MetricsSample>(_list43.size);
                MetricsSample _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new MetricsSample();
                  _elem44.read(iprot);
                  struct.gauges.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setGaugesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Metrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.counts != null) {
        if (struct.isSetCounts()) {
          oprot.writeFieldBegin(COUNTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.counts.size()));
            for (MetricsSample _iter46 : struct.counts)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.gauges != null) {
        if (struct.isSetGauges()) {
          oprot.writeFieldBegin(GAUGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.gauges.size()));
            for (MetricsSample _iter47 : struct.gauges)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricsTupleSchemeFactory implements SchemeFactory {
    public MetricsTupleScheme getScheme() {
      return new MetricsTupleScheme();
    }
  }

  private static class MetricsTupleScheme extends TupleScheme<Metrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Metrics struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCounts()) {
        optionals.set(0);
      }
      if (struct.isSetGauges()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCounts()) {
        {
          oprot.writeI32(struct.counts.size());
          for (MetricsSample _iter48 : struct.counts)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetGauges()) {
        {
          oprot.writeI32(struct.gauges.size());
          for (MetricsSample _iter49 : struct.gauges)
          {
            _iter49.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Metrics struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.counts = new ArrayList<MetricsSample>(_list50.size);
          MetricsSample _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new MetricsSample();
            _elem51.read(iprot);
            struct.counts.add(_elem51);
          }
        }
        struct.setCountsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.gauges = new ArrayList<MetricsSample>(_list53.size);
          MetricsSample _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new MetricsSample();
            _elem54.read(iprot);
            struct.gauges.add(_elem54);
          }
        }
        struct.setGaugesIsSet(true);
      }
    }
  }

}

