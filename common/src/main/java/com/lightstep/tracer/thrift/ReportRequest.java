/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lightstep.tracer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class ReportRequest implements org.apache.thrift.TBase<ReportRequest, ReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportRequest");

  private static final org.apache.thrift.protocol.TField RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("span_records", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LOG_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("log_records", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_OFFSET_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp_offset_micros", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField OLDEST_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldest_micros", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField YOUNGEST_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("youngest_micros", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField INTERNAL_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("internal_logs", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField INTERNAL_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("internal_metrics", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportRequestTupleSchemeFactory());
  }

  public Runtime runtime; // optional
  public List<SpanRecord> span_records; // optional
  public List<LogRecord> log_records; // optional
  public long timestamp_offset_micros; // optional
  public long oldest_micros; // optional
  public long youngest_micros; // optional
  public List<NamedCounter> counters; // optional
  public List<LogRecord> internal_logs; // optional
  public Metrics internal_metrics; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RUNTIME((short)1, "runtime"),
    SPAN_RECORDS((short)3, "span_records"),
    LOG_RECORDS((short)4, "log_records"),
    TIMESTAMP_OFFSET_MICROS((short)5, "timestamp_offset_micros"),
    OLDEST_MICROS((short)7, "oldest_micros"),
    YOUNGEST_MICROS((short)8, "youngest_micros"),
    COUNTERS((short)9, "counters"),
    INTERNAL_LOGS((short)10, "internal_logs"),
    INTERNAL_METRICS((short)11, "internal_metrics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RUNTIME
          return RUNTIME;
        case 3: // SPAN_RECORDS
          return SPAN_RECORDS;
        case 4: // LOG_RECORDS
          return LOG_RECORDS;
        case 5: // TIMESTAMP_OFFSET_MICROS
          return TIMESTAMP_OFFSET_MICROS;
        case 7: // OLDEST_MICROS
          return OLDEST_MICROS;
        case 8: // YOUNGEST_MICROS
          return YOUNGEST_MICROS;
        case 9: // COUNTERS
          return COUNTERS;
        case 10: // INTERNAL_LOGS
          return INTERNAL_LOGS;
        case 11: // INTERNAL_METRICS
          return INTERNAL_METRICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_OFFSET_MICROS_ISSET_ID = 0;
  private static final int __OLDEST_MICROS_ISSET_ID = 1;
  private static final int __YOUNGEST_MICROS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RUNTIME,_Fields.SPAN_RECORDS,_Fields.LOG_RECORDS,_Fields.TIMESTAMP_OFFSET_MICROS,_Fields.OLDEST_MICROS,_Fields.YOUNGEST_MICROS,_Fields.COUNTERS,_Fields.INTERNAL_LOGS,_Fields.INTERNAL_METRICS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("runtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Runtime.class)));
    tmpMap.put(_Fields.SPAN_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("span_records", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpanRecord.class))));
    tmpMap.put(_Fields.LOG_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("log_records", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogRecord.class))));
    tmpMap.put(_Fields.TIMESTAMP_OFFSET_MICROS, new org.apache.thrift.meta_data.FieldMetaData("timestamp_offset_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OLDEST_MICROS, new org.apache.thrift.meta_data.FieldMetaData("oldest_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.YOUNGEST_MICROS, new org.apache.thrift.meta_data.FieldMetaData("youngest_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NamedCounter.class))));
    tmpMap.put(_Fields.INTERNAL_LOGS, new org.apache.thrift.meta_data.FieldMetaData("internal_logs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogRecord.class))));
    tmpMap.put(_Fields.INTERNAL_METRICS, new org.apache.thrift.meta_data.FieldMetaData("internal_metrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metrics.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportRequest.class, metaDataMap);
  }

  public ReportRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportRequest(ReportRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRuntime()) {
      this.runtime = new Runtime(other.runtime);
    }
    if (other.isSetSpan_records()) {
      List<SpanRecord> __this__span_records = new ArrayList<SpanRecord>(other.span_records.size());
      for (SpanRecord other_element : other.span_records) {
        __this__span_records.add(new SpanRecord(other_element));
      }
      this.span_records = __this__span_records;
    }
    if (other.isSetLog_records()) {
      List<LogRecord> __this__log_records = new ArrayList<LogRecord>(other.log_records.size());
      for (LogRecord other_element : other.log_records) {
        __this__log_records.add(new LogRecord(other_element));
      }
      this.log_records = __this__log_records;
    }
    this.timestamp_offset_micros = other.timestamp_offset_micros;
    this.oldest_micros = other.oldest_micros;
    this.youngest_micros = other.youngest_micros;
    if (other.isSetCounters()) {
      List<NamedCounter> __this__counters = new ArrayList<NamedCounter>(other.counters.size());
      for (NamedCounter other_element : other.counters) {
        __this__counters.add(new NamedCounter(other_element));
      }
      this.counters = __this__counters;
    }
    if (other.isSetInternal_logs()) {
      List<LogRecord> __this__internal_logs = new ArrayList<LogRecord>(other.internal_logs.size());
      for (LogRecord other_element : other.internal_logs) {
        __this__internal_logs.add(new LogRecord(other_element));
      }
      this.internal_logs = __this__internal_logs;
    }
    if (other.isSetInternal_metrics()) {
      this.internal_metrics = new Metrics(other.internal_metrics);
    }
  }

  public ReportRequest deepCopy() {
    return new ReportRequest(this);
  }

  @Override
  public void clear() {
    this.runtime = null;
    this.span_records = null;
    this.log_records = null;
    setTimestamp_offset_microsIsSet(false);
    this.timestamp_offset_micros = 0;
    setOldest_microsIsSet(false);
    this.oldest_micros = 0;
    setYoungest_microsIsSet(false);
    this.youngest_micros = 0;
    this.counters = null;
    this.internal_logs = null;
    this.internal_metrics = null;
  }

  public Runtime getRuntime() {
    return this.runtime;
  }

  public ReportRequest setRuntime(Runtime runtime) {
    this.runtime = runtime;
    return this;
  }

  public void unsetRuntime() {
    this.runtime = null;
  }

  /** Returns true if field runtime is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime() {
    return this.runtime != null;
  }

  public void setRuntimeIsSet(boolean value) {
    if (!value) {
      this.runtime = null;
    }
  }

  public int getSpan_recordsSize() {
    return (this.span_records == null) ? 0 : this.span_records.size();
  }

  public java.util.Iterator<SpanRecord> getSpan_recordsIterator() {
    return (this.span_records == null) ? null : this.span_records.iterator();
  }

  public void addToSpan_records(SpanRecord elem) {
    if (this.span_records == null) {
      this.span_records = new ArrayList<SpanRecord>();
    }
    this.span_records.add(elem);
  }

  public List<SpanRecord> getSpan_records() {
    return this.span_records;
  }

  public ReportRequest setSpan_records(List<SpanRecord> span_records) {
    this.span_records = span_records;
    return this;
  }

  public void unsetSpan_records() {
    this.span_records = null;
  }

  /** Returns true if field span_records is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_records() {
    return this.span_records != null;
  }

  public void setSpan_recordsIsSet(boolean value) {
    if (!value) {
      this.span_records = null;
    }
  }

  public int getLog_recordsSize() {
    return (this.log_records == null) ? 0 : this.log_records.size();
  }

  public java.util.Iterator<LogRecord> getLog_recordsIterator() {
    return (this.log_records == null) ? null : this.log_records.iterator();
  }

  public void addToLog_records(LogRecord elem) {
    if (this.log_records == null) {
      this.log_records = new ArrayList<LogRecord>();
    }
    this.log_records.add(elem);
  }

  public List<LogRecord> getLog_records() {
    return this.log_records;
  }

  public ReportRequest setLog_records(List<LogRecord> log_records) {
    this.log_records = log_records;
    return this;
  }

  public void unsetLog_records() {
    this.log_records = null;
  }

  /** Returns true if field log_records is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_records() {
    return this.log_records != null;
  }

  public void setLog_recordsIsSet(boolean value) {
    if (!value) {
      this.log_records = null;
    }
  }

  public long getTimestamp_offset_micros() {
    return this.timestamp_offset_micros;
  }

  public ReportRequest setTimestamp_offset_micros(long timestamp_offset_micros) {
    this.timestamp_offset_micros = timestamp_offset_micros;
    setTimestamp_offset_microsIsSet(true);
    return this;
  }

  public void unsetTimestamp_offset_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_OFFSET_MICROS_ISSET_ID);
  }

  /** Returns true if field timestamp_offset_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp_offset_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_OFFSET_MICROS_ISSET_ID);
  }

  public void setTimestamp_offset_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_OFFSET_MICROS_ISSET_ID, value);
  }

  public long getOldest_micros() {
    return this.oldest_micros;
  }

  public ReportRequest setOldest_micros(long oldest_micros) {
    this.oldest_micros = oldest_micros;
    setOldest_microsIsSet(true);
    return this;
  }

  public void unsetOldest_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDEST_MICROS_ISSET_ID);
  }

  /** Returns true if field oldest_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetOldest_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDEST_MICROS_ISSET_ID);
  }

  public void setOldest_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDEST_MICROS_ISSET_ID, value);
  }

  public long getYoungest_micros() {
    return this.youngest_micros;
  }

  public ReportRequest setYoungest_micros(long youngest_micros) {
    this.youngest_micros = youngest_micros;
    setYoungest_microsIsSet(true);
    return this;
  }

  public void unsetYoungest_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YOUNGEST_MICROS_ISSET_ID);
  }

  /** Returns true if field youngest_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetYoungest_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __YOUNGEST_MICROS_ISSET_ID);
  }

  public void setYoungest_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YOUNGEST_MICROS_ISSET_ID, value);
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public java.util.Iterator<NamedCounter> getCountersIterator() {
    return (this.counters == null) ? null : this.counters.iterator();
  }

  public void addToCounters(NamedCounter elem) {
    if (this.counters == null) {
      this.counters = new ArrayList<NamedCounter>();
    }
    this.counters.add(elem);
  }

  public List<NamedCounter> getCounters() {
    return this.counters;
  }

  public ReportRequest setCounters(List<NamedCounter> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public int getInternal_logsSize() {
    return (this.internal_logs == null) ? 0 : this.internal_logs.size();
  }

  public java.util.Iterator<LogRecord> getInternal_logsIterator() {
    return (this.internal_logs == null) ? null : this.internal_logs.iterator();
  }

  public void addToInternal_logs(LogRecord elem) {
    if (this.internal_logs == null) {
      this.internal_logs = new ArrayList<LogRecord>();
    }
    this.internal_logs.add(elem);
  }

  public List<LogRecord> getInternal_logs() {
    return this.internal_logs;
  }

  public ReportRequest setInternal_logs(List<LogRecord> internal_logs) {
    this.internal_logs = internal_logs;
    return this;
  }

  public void unsetInternal_logs() {
    this.internal_logs = null;
  }

  /** Returns true if field internal_logs is set (has been assigned a value) and false otherwise */
  public boolean isSetInternal_logs() {
    return this.internal_logs != null;
  }

  public void setInternal_logsIsSet(boolean value) {
    if (!value) {
      this.internal_logs = null;
    }
  }

  public Metrics getInternal_metrics() {
    return this.internal_metrics;
  }

  public ReportRequest setInternal_metrics(Metrics internal_metrics) {
    this.internal_metrics = internal_metrics;
    return this;
  }

  public void unsetInternal_metrics() {
    this.internal_metrics = null;
  }

  /** Returns true if field internal_metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetInternal_metrics() {
    return this.internal_metrics != null;
  }

  public void setInternal_metricsIsSet(boolean value) {
    if (!value) {
      this.internal_metrics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RUNTIME:
      if (value == null) {
        unsetRuntime();
      } else {
        setRuntime((Runtime)value);
      }
      break;

    case SPAN_RECORDS:
      if (value == null) {
        unsetSpan_records();
      } else {
        setSpan_records((List<SpanRecord>)value);
      }
      break;

    case LOG_RECORDS:
      if (value == null) {
        unsetLog_records();
      } else {
        setLog_records((List<LogRecord>)value);
      }
      break;

    case TIMESTAMP_OFFSET_MICROS:
      if (value == null) {
        unsetTimestamp_offset_micros();
      } else {
        setTimestamp_offset_micros((Long)value);
      }
      break;

    case OLDEST_MICROS:
      if (value == null) {
        unsetOldest_micros();
      } else {
        setOldest_micros((Long)value);
      }
      break;

    case YOUNGEST_MICROS:
      if (value == null) {
        unsetYoungest_micros();
      } else {
        setYoungest_micros((Long)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((List<NamedCounter>)value);
      }
      break;

    case INTERNAL_LOGS:
      if (value == null) {
        unsetInternal_logs();
      } else {
        setInternal_logs((List<LogRecord>)value);
      }
      break;

    case INTERNAL_METRICS:
      if (value == null) {
        unsetInternal_metrics();
      } else {
        setInternal_metrics((Metrics)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RUNTIME:
      return getRuntime();

    case SPAN_RECORDS:
      return getSpan_records();

    case LOG_RECORDS:
      return getLog_records();

    case TIMESTAMP_OFFSET_MICROS:
      return Long.valueOf(getTimestamp_offset_micros());

    case OLDEST_MICROS:
      return Long.valueOf(getOldest_micros());

    case YOUNGEST_MICROS:
      return Long.valueOf(getYoungest_micros());

    case COUNTERS:
      return getCounters();

    case INTERNAL_LOGS:
      return getInternal_logs();

    case INTERNAL_METRICS:
      return getInternal_metrics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RUNTIME:
      return isSetRuntime();
    case SPAN_RECORDS:
      return isSetSpan_records();
    case LOG_RECORDS:
      return isSetLog_records();
    case TIMESTAMP_OFFSET_MICROS:
      return isSetTimestamp_offset_micros();
    case OLDEST_MICROS:
      return isSetOldest_micros();
    case YOUNGEST_MICROS:
      return isSetYoungest_micros();
    case COUNTERS:
      return isSetCounters();
    case INTERNAL_LOGS:
      return isSetInternal_logs();
    case INTERNAL_METRICS:
      return isSetInternal_metrics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportRequest)
      return this.equals((ReportRequest)that);
    return false;
  }

  public boolean equals(ReportRequest that) {
    if (that == null)
      return false;

    boolean this_present_runtime = true && this.isSetRuntime();
    boolean that_present_runtime = true && that.isSetRuntime();
    if (this_present_runtime || that_present_runtime) {
      if (!(this_present_runtime && that_present_runtime))
        return false;
      if (!this.runtime.equals(that.runtime))
        return false;
    }

    boolean this_present_span_records = true && this.isSetSpan_records();
    boolean that_present_span_records = true && that.isSetSpan_records();
    if (this_present_span_records || that_present_span_records) {
      if (!(this_present_span_records && that_present_span_records))
        return false;
      if (!this.span_records.equals(that.span_records))
        return false;
    }

    boolean this_present_log_records = true && this.isSetLog_records();
    boolean that_present_log_records = true && that.isSetLog_records();
    if (this_present_log_records || that_present_log_records) {
      if (!(this_present_log_records && that_present_log_records))
        return false;
      if (!this.log_records.equals(that.log_records))
        return false;
    }

    boolean this_present_timestamp_offset_micros = true && this.isSetTimestamp_offset_micros();
    boolean that_present_timestamp_offset_micros = true && that.isSetTimestamp_offset_micros();
    if (this_present_timestamp_offset_micros || that_present_timestamp_offset_micros) {
      if (!(this_present_timestamp_offset_micros && that_present_timestamp_offset_micros))
        return false;
      if (this.timestamp_offset_micros != that.timestamp_offset_micros)
        return false;
    }

    boolean this_present_oldest_micros = true && this.isSetOldest_micros();
    boolean that_present_oldest_micros = true && that.isSetOldest_micros();
    if (this_present_oldest_micros || that_present_oldest_micros) {
      if (!(this_present_oldest_micros && that_present_oldest_micros))
        return false;
      if (this.oldest_micros != that.oldest_micros)
        return false;
    }

    boolean this_present_youngest_micros = true && this.isSetYoungest_micros();
    boolean that_present_youngest_micros = true && that.isSetYoungest_micros();
    if (this_present_youngest_micros || that_present_youngest_micros) {
      if (!(this_present_youngest_micros && that_present_youngest_micros))
        return false;
      if (this.youngest_micros != that.youngest_micros)
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_internal_logs = true && this.isSetInternal_logs();
    boolean that_present_internal_logs = true && that.isSetInternal_logs();
    if (this_present_internal_logs || that_present_internal_logs) {
      if (!(this_present_internal_logs && that_present_internal_logs))
        return false;
      if (!this.internal_logs.equals(that.internal_logs))
        return false;
    }

    boolean this_present_internal_metrics = true && this.isSetInternal_metrics();
    boolean that_present_internal_metrics = true && that.isSetInternal_metrics();
    if (this_present_internal_metrics || that_present_internal_metrics) {
      if (!(this_present_internal_metrics && that_present_internal_metrics))
        return false;
      if (!this.internal_metrics.equals(that.internal_metrics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_runtime = true && (isSetRuntime());
    list.add(present_runtime);
    if (present_runtime)
      list.add(runtime);

    boolean present_span_records = true && (isSetSpan_records());
    list.add(present_span_records);
    if (present_span_records)
      list.add(span_records);

    boolean present_log_records = true && (isSetLog_records());
    list.add(present_log_records);
    if (present_log_records)
      list.add(log_records);

    boolean present_timestamp_offset_micros = true && (isSetTimestamp_offset_micros());
    list.add(present_timestamp_offset_micros);
    if (present_timestamp_offset_micros)
      list.add(timestamp_offset_micros);

    boolean present_oldest_micros = true && (isSetOldest_micros());
    list.add(present_oldest_micros);
    if (present_oldest_micros)
      list.add(oldest_micros);

    boolean present_youngest_micros = true && (isSetYoungest_micros());
    list.add(present_youngest_micros);
    if (present_youngest_micros)
      list.add(youngest_micros);

    boolean present_counters = true && (isSetCounters());
    list.add(present_counters);
    if (present_counters)
      list.add(counters);

    boolean present_internal_logs = true && (isSetInternal_logs());
    list.add(present_internal_logs);
    if (present_internal_logs)
      list.add(internal_logs);

    boolean present_internal_metrics = true && (isSetInternal_metrics());
    list.add(present_internal_metrics);
    if (present_internal_metrics)
      list.add(internal_metrics);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRuntime()).compareTo(other.isSetRuntime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime, other.runtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpan_records()).compareTo(other.isSetSpan_records());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_records()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_records, other.span_records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_records()).compareTo(other.isSetLog_records());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_records()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_records, other.log_records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp_offset_micros()).compareTo(other.isSetTimestamp_offset_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp_offset_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp_offset_micros, other.timestamp_offset_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldest_micros()).compareTo(other.isSetOldest_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldest_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldest_micros, other.oldest_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYoungest_micros()).compareTo(other.isSetYoungest_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYoungest_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.youngest_micros, other.youngest_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounters()).compareTo(other.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, other.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternal_logs()).compareTo(other.isSetInternal_logs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternal_logs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internal_logs, other.internal_logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternal_metrics()).compareTo(other.isSetInternal_metrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternal_metrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internal_metrics, other.internal_metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportRequest(");
    boolean first = true;

    if (isSetRuntime()) {
      sb.append("runtime:");
      if (this.runtime == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime);
      }
      first = false;
    }
    if (isSetSpan_records()) {
      if (!first) sb.append(", ");
      sb.append("span_records:");
      if (this.span_records == null) {
        sb.append("null");
      } else {
        sb.append(this.span_records);
      }
      first = false;
    }
    if (isSetLog_records()) {
      if (!first) sb.append(", ");
      sb.append("log_records:");
      if (this.log_records == null) {
        sb.append("null");
      } else {
        sb.append(this.log_records);
      }
      first = false;
    }
    if (isSetTimestamp_offset_micros()) {
      if (!first) sb.append(", ");
      sb.append("timestamp_offset_micros:");
      sb.append(this.timestamp_offset_micros);
      first = false;
    }
    if (isSetOldest_micros()) {
      if (!first) sb.append(", ");
      sb.append("oldest_micros:");
      sb.append(this.oldest_micros);
      first = false;
    }
    if (isSetYoungest_micros()) {
      if (!first) sb.append(", ");
      sb.append("youngest_micros:");
      sb.append(this.youngest_micros);
      first = false;
    }
    if (isSetCounters()) {
      if (!first) sb.append(", ");
      sb.append("counters:");
      if (this.counters == null) {
        sb.append("null");
      } else {
        sb.append(this.counters);
      }
      first = false;
    }
    if (isSetInternal_logs()) {
      if (!first) sb.append(", ");
      sb.append("internal_logs:");
      if (this.internal_logs == null) {
        sb.append("null");
      } else {
        sb.append(this.internal_logs);
      }
      first = false;
    }
    if (isSetInternal_metrics()) {
      if (!first) sb.append(", ");
      sb.append("internal_metrics:");
      if (this.internal_metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.internal_metrics);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (runtime != null) {
      runtime.validate();
    }
    if (internal_metrics != null) {
      internal_metrics.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportRequestStandardSchemeFactory implements SchemeFactory {
    public ReportRequestStandardScheme getScheme() {
      return new ReportRequestStandardScheme();
    }
  }

  private static class ReportRequestStandardScheme extends StandardScheme<ReportRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RUNTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.runtime = new Runtime();
              struct.runtime.read(iprot);
              struct.setRuntimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPAN_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.span_records = new ArrayList<SpanRecord>(_list64.size);
                SpanRecord _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new SpanRecord();
                  _elem65.read(iprot);
                  struct.span_records.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setSpan_recordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOG_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.log_records = new ArrayList<LogRecord>(_list67.size);
                LogRecord _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = new LogRecord();
                  _elem68.read(iprot);
                  struct.log_records.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setLog_recordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP_OFFSET_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp_offset_micros = iprot.readI64();
              struct.setTimestamp_offset_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OLDEST_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oldest_micros = iprot.readI64();
              struct.setOldest_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // YOUNGEST_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.youngest_micros = iprot.readI64();
              struct.setYoungest_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.counters = new ArrayList<NamedCounter>(_list70.size);
                NamedCounter _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = new NamedCounter();
                  _elem71.read(iprot);
                  struct.counters.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INTERNAL_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.internal_logs = new ArrayList<LogRecord>(_list73.size);
                LogRecord _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = new LogRecord();
                  _elem74.read(iprot);
                  struct.internal_logs.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setInternal_logsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INTERNAL_METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.internal_metrics = new Metrics();
              struct.internal_metrics.read(iprot);
              struct.setInternal_metricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.runtime != null) {
        if (struct.isSetRuntime()) {
          oprot.writeFieldBegin(RUNTIME_FIELD_DESC);
          struct.runtime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.span_records != null) {
        if (struct.isSetSpan_records()) {
          oprot.writeFieldBegin(SPAN_RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.span_records.size()));
            for (SpanRecord _iter76 : struct.span_records)
            {
              _iter76.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.log_records != null) {
        if (struct.isSetLog_records()) {
          oprot.writeFieldBegin(LOG_RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.log_records.size()));
            for (LogRecord _iter77 : struct.log_records)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp_offset_micros()) {
        oprot.writeFieldBegin(TIMESTAMP_OFFSET_MICROS_FIELD_DESC);
        oprot.writeI64(struct.timestamp_offset_micros);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOldest_micros()) {
        oprot.writeFieldBegin(OLDEST_MICROS_FIELD_DESC);
        oprot.writeI64(struct.oldest_micros);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYoungest_micros()) {
        oprot.writeFieldBegin(YOUNGEST_MICROS_FIELD_DESC);
        oprot.writeI64(struct.youngest_micros);
        oprot.writeFieldEnd();
      }
      if (struct.counters != null) {
        if (struct.isSetCounters()) {
          oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.counters.size()));
            for (NamedCounter _iter78 : struct.counters)
            {
              _iter78.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.internal_logs != null) {
        if (struct.isSetInternal_logs()) {
          oprot.writeFieldBegin(INTERNAL_LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.internal_logs.size()));
            for (LogRecord _iter79 : struct.internal_logs)
            {
              _iter79.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.internal_metrics != null) {
        if (struct.isSetInternal_metrics()) {
          oprot.writeFieldBegin(INTERNAL_METRICS_FIELD_DESC);
          struct.internal_metrics.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportRequestTupleSchemeFactory implements SchemeFactory {
    public ReportRequestTupleScheme getScheme() {
      return new ReportRequestTupleScheme();
    }
  }

  private static class ReportRequestTupleScheme extends TupleScheme<ReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRuntime()) {
        optionals.set(0);
      }
      if (struct.isSetSpan_records()) {
        optionals.set(1);
      }
      if (struct.isSetLog_records()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp_offset_micros()) {
        optionals.set(3);
      }
      if (struct.isSetOldest_micros()) {
        optionals.set(4);
      }
      if (struct.isSetYoungest_micros()) {
        optionals.set(5);
      }
      if (struct.isSetCounters()) {
        optionals.set(6);
      }
      if (struct.isSetInternal_logs()) {
        optionals.set(7);
      }
      if (struct.isSetInternal_metrics()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRuntime()) {
        struct.runtime.write(oprot);
      }
      if (struct.isSetSpan_records()) {
        {
          oprot.writeI32(struct.span_records.size());
          for (SpanRecord _iter80 : struct.span_records)
          {
            _iter80.write(oprot);
          }
        }
      }
      if (struct.isSetLog_records()) {
        {
          oprot.writeI32(struct.log_records.size());
          for (LogRecord _iter81 : struct.log_records)
          {
            _iter81.write(oprot);
          }
        }
      }
      if (struct.isSetTimestamp_offset_micros()) {
        oprot.writeI64(struct.timestamp_offset_micros);
      }
      if (struct.isSetOldest_micros()) {
        oprot.writeI64(struct.oldest_micros);
      }
      if (struct.isSetYoungest_micros()) {
        oprot.writeI64(struct.youngest_micros);
      }
      if (struct.isSetCounters()) {
        {
          oprot.writeI32(struct.counters.size());
          for (NamedCounter _iter82 : struct.counters)
          {
            _iter82.write(oprot);
          }
        }
      }
      if (struct.isSetInternal_logs()) {
        {
          oprot.writeI32(struct.internal_logs.size());
          for (LogRecord _iter83 : struct.internal_logs)
          {
            _iter83.write(oprot);
          }
        }
      }
      if (struct.isSetInternal_metrics()) {
        struct.internal_metrics.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.runtime = new Runtime();
        struct.runtime.read(iprot);
        struct.setRuntimeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.span_records = new ArrayList<SpanRecord>(_list84.size);
          SpanRecord _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = new SpanRecord();
            _elem85.read(iprot);
            struct.span_records.add(_elem85);
          }
        }
        struct.setSpan_recordsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.log_records = new ArrayList<LogRecord>(_list87.size);
          LogRecord _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new LogRecord();
            _elem88.read(iprot);
            struct.log_records.add(_elem88);
          }
        }
        struct.setLog_recordsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp_offset_micros = iprot.readI64();
        struct.setTimestamp_offset_microsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.oldest_micros = iprot.readI64();
        struct.setOldest_microsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.youngest_micros = iprot.readI64();
        struct.setYoungest_microsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.counters = new ArrayList<NamedCounter>(_list90.size);
          NamedCounter _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new NamedCounter();
            _elem91.read(iprot);
            struct.counters.add(_elem91);
          }
        }
        struct.setCountersIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.internal_logs = new ArrayList<LogRecord>(_list93.size);
          LogRecord _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new LogRecord();
            _elem94.read(iprot);
            struct.internal_logs.add(_elem94);
          }
        }
        struct.setInternal_logsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.internal_metrics = new Metrics();
        struct.internal_metrics.read(iprot);
        struct.setInternal_metricsIsSet(true);
      }
    }
  }

}

