/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lightstep.tracer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-13")
public class ReportResponse implements org.apache.thrift.TBase<ReportResponse, ReportResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ReportResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportResponse");

  private static final org.apache.thrift.protocol.TField COMMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commands", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TIMING_FIELD_DESC = new org.apache.thrift.protocol.TField("timing", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("errors", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportResponseTupleSchemeFactory());
  }

  public List<Command> commands; // optional
  public Timing timing; // optional
  public List<String> errors; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMANDS((short)1, "commands"),
    TIMING((short)2, "timing"),
    ERRORS((short)3, "errors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMANDS
          return COMMANDS;
        case 2: // TIMING
          return TIMING;
        case 3: // ERRORS
          return ERRORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMMANDS,_Fields.TIMING,_Fields.ERRORS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMANDS, new org.apache.thrift.meta_data.FieldMetaData("commands", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Command.class))));
    tmpMap.put(_Fields.TIMING, new org.apache.thrift.meta_data.FieldMetaData("timing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Timing.class)));
    tmpMap.put(_Fields.ERRORS, new org.apache.thrift.meta_data.FieldMetaData("errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportResponse.class, metaDataMap);
  }

  public ReportResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportResponse(ReportResponse other) {
    if (other.isSetCommands()) {
      List<Command> __this__commands = new ArrayList<Command>(other.commands.size());
      for (Command other_element : other.commands) {
        __this__commands.add(new Command(other_element));
      }
      this.commands = __this__commands;
    }
    if (other.isSetTiming()) {
      this.timing = new Timing(other.timing);
    }
    if (other.isSetErrors()) {
      List<String> __this__errors = new ArrayList<String>(other.errors);
      this.errors = __this__errors;
    }
  }

  public ReportResponse deepCopy() {
    return new ReportResponse(this);
  }

  @Override
  public void clear() {
    this.commands = null;
    this.timing = null;
    this.errors = null;
  }

  public int getCommandsSize() {
    return (this.commands == null) ? 0 : this.commands.size();
  }

  public java.util.Iterator<Command> getCommandsIterator() {
    return (this.commands == null) ? null : this.commands.iterator();
  }

  public void addToCommands(Command elem) {
    if (this.commands == null) {
      this.commands = new ArrayList<Command>();
    }
    this.commands.add(elem);
  }

  public List<Command> getCommands() {
    return this.commands;
  }

  public ReportResponse setCommands(List<Command> commands) {
    this.commands = commands;
    return this;
  }

  public void unsetCommands() {
    this.commands = null;
  }

  /** Returns true if field commands is set (has been assigned a value) and false otherwise */
  public boolean isSetCommands() {
    return this.commands != null;
  }

  public void setCommandsIsSet(boolean value) {
    if (!value) {
      this.commands = null;
    }
  }

  public Timing getTiming() {
    return this.timing;
  }

  public ReportResponse setTiming(Timing timing) {
    this.timing = timing;
    return this;
  }

  public void unsetTiming() {
    this.timing = null;
  }

  /** Returns true if field timing is set (has been assigned a value) and false otherwise */
  public boolean isSetTiming() {
    return this.timing != null;
  }

  public void setTimingIsSet(boolean value) {
    if (!value) {
      this.timing = null;
    }
  }

  public int getErrorsSize() {
    return (this.errors == null) ? 0 : this.errors.size();
  }

  public java.util.Iterator<String> getErrorsIterator() {
    return (this.errors == null) ? null : this.errors.iterator();
  }

  public void addToErrors(String elem) {
    if (this.errors == null) {
      this.errors = new ArrayList<String>();
    }
    this.errors.add(elem);
  }

  public List<String> getErrors() {
    return this.errors;
  }

  public ReportResponse setErrors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public void unsetErrors() {
    this.errors = null;
  }

  /** Returns true if field errors is set (has been assigned a value) and false otherwise */
  public boolean isSetErrors() {
    return this.errors != null;
  }

  public void setErrorsIsSet(boolean value) {
    if (!value) {
      this.errors = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMANDS:
      if (value == null) {
        unsetCommands();
      } else {
        setCommands((List<Command>)value);
      }
      break;

    case TIMING:
      if (value == null) {
        unsetTiming();
      } else {
        setTiming((Timing)value);
      }
      break;

    case ERRORS:
      if (value == null) {
        unsetErrors();
      } else {
        setErrors((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMANDS:
      return getCommands();

    case TIMING:
      return getTiming();

    case ERRORS:
      return getErrors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMANDS:
      return isSetCommands();
    case TIMING:
      return isSetTiming();
    case ERRORS:
      return isSetErrors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportResponse)
      return this.equals((ReportResponse)that);
    return false;
  }

  public boolean equals(ReportResponse that) {
    if (that == null)
      return false;

    boolean this_present_commands = true && this.isSetCommands();
    boolean that_present_commands = true && that.isSetCommands();
    if (this_present_commands || that_present_commands) {
      if (!(this_present_commands && that_present_commands))
        return false;
      if (!this.commands.equals(that.commands))
        return false;
    }

    boolean this_present_timing = true && this.isSetTiming();
    boolean that_present_timing = true && that.isSetTiming();
    if (this_present_timing || that_present_timing) {
      if (!(this_present_timing && that_present_timing))
        return false;
      if (!this.timing.equals(that.timing))
        return false;
    }

    boolean this_present_errors = true && this.isSetErrors();
    boolean that_present_errors = true && that.isSetErrors();
    if (this_present_errors || that_present_errors) {
      if (!(this_present_errors && that_present_errors))
        return false;
      if (!this.errors.equals(that.errors))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_commands = true && (isSetCommands());
    list.add(present_commands);
    if (present_commands)
      list.add(commands);

    boolean present_timing = true && (isSetTiming());
    list.add(present_timing);
    if (present_timing)
      list.add(timing);

    boolean present_errors = true && (isSetErrors());
    list.add(present_errors);
    if (present_errors)
      list.add(errors);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommands()).compareTo(other.isSetCommands());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommands()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commands, other.commands);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiming()).compareTo(other.isSetTiming());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiming()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timing, other.timing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrors()).compareTo(other.isSetErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errors, other.errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportResponse(");
    boolean first = true;

    if (isSetCommands()) {
      sb.append("commands:");
      if (this.commands == null) {
        sb.append("null");
      } else {
        sb.append(this.commands);
      }
      first = false;
    }
    if (isSetTiming()) {
      if (!first) sb.append(", ");
      sb.append("timing:");
      if (this.timing == null) {
        sb.append("null");
      } else {
        sb.append(this.timing);
      }
      first = false;
    }
    if (isSetErrors()) {
      if (!first) sb.append(", ");
      sb.append("errors:");
      if (this.errors == null) {
        sb.append("null");
      } else {
        sb.append(this.errors);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (timing != null) {
      timing.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportResponseStandardSchemeFactory implements SchemeFactory {
    public ReportResponseStandardScheme getScheme() {
      return new ReportResponseStandardScheme();
    }
  }

  private static class ReportResponseStandardScheme extends StandardScheme<ReportResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMANDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.commands = new ArrayList<Command>(_list88.size);
                Command _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = new Command();
                  _elem89.read(iprot);
                  struct.commands.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setCommandsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timing = new Timing();
              struct.timing.read(iprot);
              struct.setTimingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.errors = new ArrayList<String>(_list91.size);
                String _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = iprot.readString();
                  struct.errors.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setErrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commands != null) {
        if (struct.isSetCommands()) {
          oprot.writeFieldBegin(COMMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commands.size()));
            for (Command _iter94 : struct.commands)
            {
              _iter94.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timing != null) {
        if (struct.isSetTiming()) {
          oprot.writeFieldBegin(TIMING_FIELD_DESC);
          struct.timing.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.errors != null) {
        if (struct.isSetErrors()) {
          oprot.writeFieldBegin(ERRORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.errors.size()));
            for (String _iter95 : struct.errors)
            {
              oprot.writeString(_iter95);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportResponseTupleSchemeFactory implements SchemeFactory {
    public ReportResponseTupleScheme getScheme() {
      return new ReportResponseTupleScheme();
    }
  }

  private static class ReportResponseTupleScheme extends TupleScheme<ReportResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommands()) {
        optionals.set(0);
      }
      if (struct.isSetTiming()) {
        optionals.set(1);
      }
      if (struct.isSetErrors()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommands()) {
        {
          oprot.writeI32(struct.commands.size());
          for (Command _iter96 : struct.commands)
          {
            _iter96.write(oprot);
          }
        }
      }
      if (struct.isSetTiming()) {
        struct.timing.write(oprot);
      }
      if (struct.isSetErrors()) {
        {
          oprot.writeI32(struct.errors.size());
          for (String _iter97 : struct.errors)
          {
            oprot.writeString(_iter97);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commands = new ArrayList<Command>(_list98.size);
          Command _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = new Command();
            _elem99.read(iprot);
            struct.commands.add(_elem99);
          }
        }
        struct.setCommandsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timing = new Timing();
        struct.timing.read(iprot);
        struct.setTimingIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.errors = new ArrayList<String>(_list101.size);
          String _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readString();
            struct.errors.add(_elem102);
          }
        }
        struct.setErrorsIsSet(true);
      }
    }
  }

}

