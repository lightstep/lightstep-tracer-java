/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lightstep.tracer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-13")
public class Runtime implements org.apache.thrift.TBase<Runtime, Runtime._Fields>, java.io.Serializable, Cloneable, Comparable<Runtime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Runtime");

  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField START_MICROS_FIELD_DESC = new org.apache.thrift.protocol.TField("start_micros", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("group_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("attrs", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RuntimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RuntimeTupleSchemeFactory());
  }

  public String guid; // optional
  public long start_micros; // optional
  public String group_name; // optional
  public List<KeyValue> attrs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUID((short)1, "guid"),
    START_MICROS((short)2, "start_micros"),
    GROUP_NAME((short)3, "group_name"),
    ATTRS((short)4, "attrs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUID
          return GUID;
        case 2: // START_MICROS
          return START_MICROS;
        case 3: // GROUP_NAME
          return GROUP_NAME;
        case 4: // ATTRS
          return ATTRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_MICROS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GUID,_Fields.START_MICROS,_Fields.GROUP_NAME,_Fields.ATTRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_MICROS, new org.apache.thrift.meta_data.FieldMetaData("start_micros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("group_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTRS, new org.apache.thrift.meta_data.FieldMetaData("attrs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Runtime.class, metaDataMap);
  }

  public Runtime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Runtime(Runtime other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    this.start_micros = other.start_micros;
    if (other.isSetGroup_name()) {
      this.group_name = other.group_name;
    }
    if (other.isSetAttrs()) {
      List<KeyValue> __this__attrs = new ArrayList<KeyValue>(other.attrs.size());
      for (KeyValue other_element : other.attrs) {
        __this__attrs.add(new KeyValue(other_element));
      }
      this.attrs = __this__attrs;
    }
  }

  public Runtime deepCopy() {
    return new Runtime(this);
  }

  @Override
  public void clear() {
    this.guid = null;
    setStart_microsIsSet(false);
    this.start_micros = 0;
    this.group_name = null;
    this.attrs = null;
  }

  public String getGuid() {
    return this.guid;
  }

  public Runtime setGuid(String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public long getStart_micros() {
    return this.start_micros;
  }

  public Runtime setStart_micros(long start_micros) {
    this.start_micros = start_micros;
    setStart_microsIsSet(true);
    return this;
  }

  public void unsetStart_micros() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_MICROS_ISSET_ID);
  }

  /** Returns true if field start_micros is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_micros() {
    return EncodingUtils.testBit(__isset_bitfield, __START_MICROS_ISSET_ID);
  }

  public void setStart_microsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_MICROS_ISSET_ID, value);
  }

  public String getGroup_name() {
    return this.group_name;
  }

  public Runtime setGroup_name(String group_name) {
    this.group_name = group_name;
    return this;
  }

  public void unsetGroup_name() {
    this.group_name = null;
  }

  /** Returns true if field group_name is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_name() {
    return this.group_name != null;
  }

  public void setGroup_nameIsSet(boolean value) {
    if (!value) {
      this.group_name = null;
    }
  }

  public int getAttrsSize() {
    return (this.attrs == null) ? 0 : this.attrs.size();
  }

  public java.util.Iterator<KeyValue> getAttrsIterator() {
    return (this.attrs == null) ? null : this.attrs.iterator();
  }

  public void addToAttrs(KeyValue elem) {
    if (this.attrs == null) {
      this.attrs = new ArrayList<KeyValue>();
    }
    this.attrs.add(elem);
  }

  public List<KeyValue> getAttrs() {
    return this.attrs;
  }

  public Runtime setAttrs(List<KeyValue> attrs) {
    this.attrs = attrs;
    return this;
  }

  public void unsetAttrs() {
    this.attrs = null;
  }

  /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrs() {
    return this.attrs != null;
  }

  public void setAttrsIsSet(boolean value) {
    if (!value) {
      this.attrs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((String)value);
      }
      break;

    case START_MICROS:
      if (value == null) {
        unsetStart_micros();
      } else {
        setStart_micros((Long)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroup_name();
      } else {
        setGroup_name((String)value);
      }
      break;

    case ATTRS:
      if (value == null) {
        unsetAttrs();
      } else {
        setAttrs((List<KeyValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GUID:
      return getGuid();

    case START_MICROS:
      return Long.valueOf(getStart_micros());

    case GROUP_NAME:
      return getGroup_name();

    case ATTRS:
      return getAttrs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GUID:
      return isSetGuid();
    case START_MICROS:
      return isSetStart_micros();
    case GROUP_NAME:
      return isSetGroup_name();
    case ATTRS:
      return isSetAttrs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Runtime)
      return this.equals((Runtime)that);
    return false;
  }

  public boolean equals(Runtime that) {
    if (that == null)
      return false;

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_start_micros = true && this.isSetStart_micros();
    boolean that_present_start_micros = true && that.isSetStart_micros();
    if (this_present_start_micros || that_present_start_micros) {
      if (!(this_present_start_micros && that_present_start_micros))
        return false;
      if (this.start_micros != that.start_micros)
        return false;
    }

    boolean this_present_group_name = true && this.isSetGroup_name();
    boolean that_present_group_name = true && that.isSetGroup_name();
    if (this_present_group_name || that_present_group_name) {
      if (!(this_present_group_name && that_present_group_name))
        return false;
      if (!this.group_name.equals(that.group_name))
        return false;
    }

    boolean this_present_attrs = true && this.isSetAttrs();
    boolean that_present_attrs = true && that.isSetAttrs();
    if (this_present_attrs || that_present_attrs) {
      if (!(this_present_attrs && that_present_attrs))
        return false;
      if (!this.attrs.equals(that.attrs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_guid = true && (isSetGuid());
    list.add(present_guid);
    if (present_guid)
      list.add(guid);

    boolean present_start_micros = true && (isSetStart_micros());
    list.add(present_start_micros);
    if (present_start_micros)
      list.add(start_micros);

    boolean present_group_name = true && (isSetGroup_name());
    list.add(present_group_name);
    if (present_group_name)
      list.add(group_name);

    boolean present_attrs = true && (isSetAttrs());
    list.add(present_attrs);
    if (present_attrs)
      list.add(attrs);

    return list.hashCode();
  }

  @Override
  public int compareTo(Runtime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_micros()).compareTo(other.isSetStart_micros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_micros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_micros, other.start_micros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_name()).compareTo(other.isSetGroup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_name, other.group_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttrs()).compareTo(other.isSetAttrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrs, other.attrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Runtime(");
    boolean first = true;

    if (isSetGuid()) {
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
    }
    if (isSetStart_micros()) {
      if (!first) sb.append(", ");
      sb.append("start_micros:");
      sb.append(this.start_micros);
      first = false;
    }
    if (isSetGroup_name()) {
      if (!first) sb.append(", ");
      sb.append("group_name:");
      if (this.group_name == null) {
        sb.append("null");
      } else {
        sb.append(this.group_name);
      }
      first = false;
    }
    if (isSetAttrs()) {
      if (!first) sb.append(", ");
      sb.append("attrs:");
      if (this.attrs == null) {
        sb.append("null");
      } else {
        sb.append(this.attrs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RuntimeStandardSchemeFactory implements SchemeFactory {
    public RuntimeStandardScheme getScheme() {
      return new RuntimeStandardScheme();
    }
  }

  private static class RuntimeStandardScheme extends StandardScheme<Runtime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Runtime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_MICROS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_micros = iprot.readI64();
              struct.setStart_microsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group_name = iprot.readString();
              struct.setGroup_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.attrs = new ArrayList<KeyValue>(_list0.size);
                KeyValue _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new KeyValue();
                  _elem1.read(iprot);
                  struct.attrs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAttrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Runtime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guid != null) {
        if (struct.isSetGuid()) {
          oprot.writeFieldBegin(GUID_FIELD_DESC);
          oprot.writeString(struct.guid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStart_micros()) {
        oprot.writeFieldBegin(START_MICROS_FIELD_DESC);
        oprot.writeI64(struct.start_micros);
        oprot.writeFieldEnd();
      }
      if (struct.group_name != null) {
        if (struct.isSetGroup_name()) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.group_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attrs != null) {
        if (struct.isSetAttrs()) {
          oprot.writeFieldBegin(ATTRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attrs.size()));
            for (KeyValue _iter3 : struct.attrs)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RuntimeTupleSchemeFactory implements SchemeFactory {
    public RuntimeTupleScheme getScheme() {
      return new RuntimeTupleScheme();
    }
  }

  private static class RuntimeTupleScheme extends TupleScheme<Runtime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Runtime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGuid()) {
        optionals.set(0);
      }
      if (struct.isSetStart_micros()) {
        optionals.set(1);
      }
      if (struct.isSetGroup_name()) {
        optionals.set(2);
      }
      if (struct.isSetAttrs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetStart_micros()) {
        oprot.writeI64(struct.start_micros);
      }
      if (struct.isSetGroup_name()) {
        oprot.writeString(struct.group_name);
      }
      if (struct.isSetAttrs()) {
        {
          oprot.writeI32(struct.attrs.size());
          for (KeyValue _iter4 : struct.attrs)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Runtime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.start_micros = iprot.readI64();
        struct.setStart_microsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.group_name = iprot.readString();
        struct.setGroup_nameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.attrs = new ArrayList<KeyValue>(_list5.size);
          KeyValue _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new KeyValue();
            _elem6.read(iprot);
            struct.attrs.add(_elem6);
          }
        }
        struct.setAttrsIsSet(true);
      }
    }
  }

}

